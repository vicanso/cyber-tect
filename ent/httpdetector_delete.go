// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/httpdetector"
	"github.com/vicanso/cybertect/ent/predicate"
)

// HTTPDetectorDelete is the builder for deleting a HTTPDetector entity.
type HTTPDetectorDelete struct {
	config
	hooks    []Hook
	mutation *HTTPDetectorMutation
}

// Where appends a list predicates to the HTTPDetectorDelete builder.
func (hdd *HTTPDetectorDelete) Where(ps ...predicate.HTTPDetector) *HTTPDetectorDelete {
	hdd.mutation.Where(ps...)
	return hdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hdd *HTTPDetectorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HTTPDetectorMutation](ctx, hdd.sqlExec, hdd.mutation, hdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hdd *HTTPDetectorDelete) ExecX(ctx context.Context) int {
	n, err := hdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hdd *HTTPDetectorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(httpdetector.Table, sqlgraph.NewFieldSpec(httpdetector.FieldID, field.TypeInt))
	if ps := hdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hdd.mutation.done = true
	return affected, err
}

// HTTPDetectorDeleteOne is the builder for deleting a single HTTPDetector entity.
type HTTPDetectorDeleteOne struct {
	hdd *HTTPDetectorDelete
}

// Where appends a list predicates to the HTTPDetectorDelete builder.
func (hddo *HTTPDetectorDeleteOne) Where(ps ...predicate.HTTPDetector) *HTTPDetectorDeleteOne {
	hddo.hdd.mutation.Where(ps...)
	return hddo
}

// Exec executes the deletion query.
func (hddo *HTTPDetectorDeleteOne) Exec(ctx context.Context) error {
	n, err := hddo.hdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{httpdetector.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hddo *HTTPDetectorDeleteOne) ExecX(ctx context.Context) {
	if err := hddo.Exec(ctx); err != nil {
		panic(err)
	}
}
