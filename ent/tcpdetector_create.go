// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/schema"
	"github.com/vicanso/cybertect/ent/tcpdetector"
)

// TCPDetectorCreate is the builder for creating a TCPDetector entity.
type TCPDetectorCreate struct {
	config
	mutation *TCPDetectorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tdc *TCPDetectorCreate) SetCreatedAt(t time.Time) *TCPDetectorCreate {
	tdc.mutation.SetCreatedAt(t)
	return tdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdc *TCPDetectorCreate) SetNillableCreatedAt(t *time.Time) *TCPDetectorCreate {
	if t != nil {
		tdc.SetCreatedAt(*t)
	}
	return tdc
}

// SetUpdatedAt sets the "updated_at" field.
func (tdc *TCPDetectorCreate) SetUpdatedAt(t time.Time) *TCPDetectorCreate {
	tdc.mutation.SetUpdatedAt(t)
	return tdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tdc *TCPDetectorCreate) SetNillableUpdatedAt(t *time.Time) *TCPDetectorCreate {
	if t != nil {
		tdc.SetUpdatedAt(*t)
	}
	return tdc
}

// SetStatus sets the "status" field.
func (tdc *TCPDetectorCreate) SetStatus(s schema.Status) *TCPDetectorCreate {
	tdc.mutation.SetStatus(s)
	return tdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tdc *TCPDetectorCreate) SetNillableStatus(s *schema.Status) *TCPDetectorCreate {
	if s != nil {
		tdc.SetStatus(*s)
	}
	return tdc
}

// SetName sets the "name" field.
func (tdc *TCPDetectorCreate) SetName(s string) *TCPDetectorCreate {
	tdc.mutation.SetName(s)
	return tdc
}

// SetOwner sets the "owner" field.
func (tdc *TCPDetectorCreate) SetOwner(s string) *TCPDetectorCreate {
	tdc.mutation.SetOwner(s)
	return tdc
}

// SetDescription sets the "description" field.
func (tdc *TCPDetectorCreate) SetDescription(s string) *TCPDetectorCreate {
	tdc.mutation.SetDescription(s)
	return tdc
}

// SetReceivers sets the "receivers" field.
func (tdc *TCPDetectorCreate) SetReceivers(s []string) *TCPDetectorCreate {
	tdc.mutation.SetReceivers(s)
	return tdc
}

// SetTimeout sets the "timeout" field.
func (tdc *TCPDetectorCreate) SetTimeout(s string) *TCPDetectorCreate {
	tdc.mutation.SetTimeout(s)
	return tdc
}

// SetAddrs sets the "addrs" field.
func (tdc *TCPDetectorCreate) SetAddrs(s []string) *TCPDetectorCreate {
	tdc.mutation.SetAddrs(s)
	return tdc
}

// Mutation returns the TCPDetectorMutation object of the builder.
func (tdc *TCPDetectorCreate) Mutation() *TCPDetectorMutation {
	return tdc.mutation
}

// Save creates the TCPDetector in the database.
func (tdc *TCPDetectorCreate) Save(ctx context.Context) (*TCPDetector, error) {
	var (
		err  error
		node *TCPDetector
	)
	tdc.defaults()
	if len(tdc.hooks) == 0 {
		if err = tdc.check(); err != nil {
			return nil, err
		}
		node, err = tdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TCPDetectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdc.check(); err != nil {
				return nil, err
			}
			tdc.mutation = mutation
			node, err = tdc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tdc.hooks) - 1; i >= 0; i-- {
			mut = tdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TCPDetectorCreate) SaveX(ctx context.Context) *TCPDetector {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tdc *TCPDetectorCreate) defaults() {
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		v := tcpdetector.DefaultCreatedAt()
		tdc.mutation.SetCreatedAt(v)
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		v := tcpdetector.DefaultUpdatedAt()
		tdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tdc.mutation.Status(); !ok {
		v := tcpdetector.DefaultStatus
		tdc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TCPDetectorCreate) check() error {
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := tdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := tdc.mutation.Status(); ok {
		if err := tcpdetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := tdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := tdc.mutation.Name(); ok {
		if err := tcpdetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := tdc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New("ent: missing required field \"owner\"")}
	}
	if v, ok := tdc.mutation.Owner(); ok {
		if err := tcpdetector.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if _, ok := tdc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	if _, ok := tdc.mutation.Receivers(); !ok {
		return &ValidationError{Name: "receivers", err: errors.New("ent: missing required field \"receivers\"")}
	}
	if _, ok := tdc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New("ent: missing required field \"timeout\"")}
	}
	if v, ok := tdc.mutation.Timeout(); ok {
		if err := tcpdetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	if _, ok := tdc.mutation.Addrs(); !ok {
		return &ValidationError{Name: "addrs", err: errors.New("ent: missing required field \"addrs\"")}
	}
	return nil
}

func (tdc *TCPDetectorCreate) sqlSave(ctx context.Context) (*TCPDetector, error) {
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tdc *TCPDetectorCreate) createSpec() (*TCPDetector, *sqlgraph.CreateSpec) {
	var (
		_node = &TCPDetector{config: tdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tcpdetector.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tcpdetector.FieldID,
			},
		}
	)
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tcpdetector.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tcpdetector.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tdc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tcpdetector.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tdc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tcpdetector.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tdc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tcpdetector.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := tdc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tcpdetector.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := tdc.mutation.Receivers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tcpdetector.FieldReceivers,
		})
		_node.Receivers = value
	}
	if value, ok := tdc.mutation.Timeout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tcpdetector.FieldTimeout,
		})
		_node.Timeout = value
	}
	if value, ok := tdc.mutation.Addrs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tcpdetector.FieldAddrs,
		})
		_node.Addrs = value
	}
	return _node, _spec
}

// TCPDetectorCreateBulk is the builder for creating many TCPDetector entities in bulk.
type TCPDetectorCreateBulk struct {
	config
	builders []*TCPDetectorCreate
}

// Save creates the TCPDetector entities in the database.
func (tdcb *TCPDetectorCreateBulk) Save(ctx context.Context) ([]*TCPDetector, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TCPDetector, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TCPDetectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TCPDetectorCreateBulk) SaveX(ctx context.Context) []*TCPDetector {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
