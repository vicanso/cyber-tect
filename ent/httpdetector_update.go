// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/httpdetector"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/ent/schema"
)

// HTTPDetectorUpdate is the builder for updating HTTPDetector entities.
type HTTPDetectorUpdate struct {
	config
	hooks    []Hook
	mutation *HTTPDetectorMutation
}

// Where adds a new predicate for the HTTPDetectorUpdate builder.
func (hdu *HTTPDetectorUpdate) Where(ps ...predicate.HTTPDetector) *HTTPDetectorUpdate {
	hdu.mutation.predicates = append(hdu.mutation.predicates, ps...)
	return hdu
}

// SetStatus sets the "status" field.
func (hdu *HTTPDetectorUpdate) SetStatus(s schema.Status) *HTTPDetectorUpdate {
	hdu.mutation.ResetStatus()
	hdu.mutation.SetStatus(s)
	return hdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hdu *HTTPDetectorUpdate) SetNillableStatus(s *schema.Status) *HTTPDetectorUpdate {
	if s != nil {
		hdu.SetStatus(*s)
	}
	return hdu
}

// AddStatus adds s to the "status" field.
func (hdu *HTTPDetectorUpdate) AddStatus(s schema.Status) *HTTPDetectorUpdate {
	hdu.mutation.AddStatus(s)
	return hdu
}

// SetName sets the "name" field.
func (hdu *HTTPDetectorUpdate) SetName(s string) *HTTPDetectorUpdate {
	hdu.mutation.SetName(s)
	return hdu
}

// SetOwner sets the "owner" field.
func (hdu *HTTPDetectorUpdate) SetOwner(s string) *HTTPDetectorUpdate {
	hdu.mutation.SetOwner(s)
	return hdu
}

// SetDescription sets the "description" field.
func (hdu *HTTPDetectorUpdate) SetDescription(s string) *HTTPDetectorUpdate {
	hdu.mutation.SetDescription(s)
	return hdu
}

// SetReceivers sets the "receivers" field.
func (hdu *HTTPDetectorUpdate) SetReceivers(s []string) *HTTPDetectorUpdate {
	hdu.mutation.SetReceivers(s)
	return hdu
}

// SetTimeout sets the "timeout" field.
func (hdu *HTTPDetectorUpdate) SetTimeout(s string) *HTTPDetectorUpdate {
	hdu.mutation.SetTimeout(s)
	return hdu
}

// SetIps sets the "ips" field.
func (hdu *HTTPDetectorUpdate) SetIps(s []string) *HTTPDetectorUpdate {
	hdu.mutation.SetIps(s)
	return hdu
}

// SetURL sets the "url" field.
func (hdu *HTTPDetectorUpdate) SetURL(s string) *HTTPDetectorUpdate {
	hdu.mutation.SetURL(s)
	return hdu
}

// Mutation returns the HTTPDetectorMutation object of the builder.
func (hdu *HTTPDetectorUpdate) Mutation() *HTTPDetectorMutation {
	return hdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hdu *HTTPDetectorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hdu.defaults()
	if len(hdu.hooks) == 0 {
		if err = hdu.check(); err != nil {
			return 0, err
		}
		affected, err = hdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HTTPDetectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hdu.check(); err != nil {
				return 0, err
			}
			hdu.mutation = mutation
			affected, err = hdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hdu.hooks) - 1; i >= 0; i-- {
			mut = hdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hdu *HTTPDetectorUpdate) SaveX(ctx context.Context) int {
	affected, err := hdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hdu *HTTPDetectorUpdate) Exec(ctx context.Context) error {
	_, err := hdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hdu *HTTPDetectorUpdate) ExecX(ctx context.Context) {
	if err := hdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hdu *HTTPDetectorUpdate) defaults() {
	if _, ok := hdu.mutation.UpdatedAt(); !ok {
		v := httpdetector.UpdateDefaultUpdatedAt()
		hdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hdu *HTTPDetectorUpdate) check() error {
	if v, ok := hdu.mutation.Status(); ok {
		if err := httpdetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := hdu.mutation.Name(); ok {
		if err := httpdetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := hdu.mutation.Owner(); ok {
		if err := httpdetector.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if v, ok := hdu.mutation.Timeout(); ok {
		if err := httpdetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	if v, ok := hdu.mutation.URL(); ok {
		if err := httpdetector.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf("ent: validator failed for field \"url\": %w", err)}
		}
	}
	return nil
}

func (hdu *HTTPDetectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   httpdetector.Table,
			Columns: httpdetector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: httpdetector.FieldID,
			},
		},
	}
	if ps := hdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: httpdetector.FieldUpdatedAt,
		})
	}
	if value, ok := hdu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: httpdetector.FieldStatus,
		})
	}
	if value, ok := hdu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: httpdetector.FieldStatus,
		})
	}
	if value, ok := hdu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldName,
		})
	}
	if value, ok := hdu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldOwner,
		})
	}
	if value, ok := hdu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldDescription,
		})
	}
	if value, ok := hdu.mutation.Receivers(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: httpdetector.FieldReceivers,
		})
	}
	if value, ok := hdu.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldTimeout,
		})
	}
	if value, ok := hdu.mutation.Ips(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: httpdetector.FieldIps,
		})
	}
	if value, ok := hdu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{httpdetector.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HTTPDetectorUpdateOne is the builder for updating a single HTTPDetector entity.
type HTTPDetectorUpdateOne struct {
	config
	hooks    []Hook
	mutation *HTTPDetectorMutation
}

// SetStatus sets the "status" field.
func (hduo *HTTPDetectorUpdateOne) SetStatus(s schema.Status) *HTTPDetectorUpdateOne {
	hduo.mutation.ResetStatus()
	hduo.mutation.SetStatus(s)
	return hduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hduo *HTTPDetectorUpdateOne) SetNillableStatus(s *schema.Status) *HTTPDetectorUpdateOne {
	if s != nil {
		hduo.SetStatus(*s)
	}
	return hduo
}

// AddStatus adds s to the "status" field.
func (hduo *HTTPDetectorUpdateOne) AddStatus(s schema.Status) *HTTPDetectorUpdateOne {
	hduo.mutation.AddStatus(s)
	return hduo
}

// SetName sets the "name" field.
func (hduo *HTTPDetectorUpdateOne) SetName(s string) *HTTPDetectorUpdateOne {
	hduo.mutation.SetName(s)
	return hduo
}

// SetOwner sets the "owner" field.
func (hduo *HTTPDetectorUpdateOne) SetOwner(s string) *HTTPDetectorUpdateOne {
	hduo.mutation.SetOwner(s)
	return hduo
}

// SetDescription sets the "description" field.
func (hduo *HTTPDetectorUpdateOne) SetDescription(s string) *HTTPDetectorUpdateOne {
	hduo.mutation.SetDescription(s)
	return hduo
}

// SetReceivers sets the "receivers" field.
func (hduo *HTTPDetectorUpdateOne) SetReceivers(s []string) *HTTPDetectorUpdateOne {
	hduo.mutation.SetReceivers(s)
	return hduo
}

// SetTimeout sets the "timeout" field.
func (hduo *HTTPDetectorUpdateOne) SetTimeout(s string) *HTTPDetectorUpdateOne {
	hduo.mutation.SetTimeout(s)
	return hduo
}

// SetIps sets the "ips" field.
func (hduo *HTTPDetectorUpdateOne) SetIps(s []string) *HTTPDetectorUpdateOne {
	hduo.mutation.SetIps(s)
	return hduo
}

// SetURL sets the "url" field.
func (hduo *HTTPDetectorUpdateOne) SetURL(s string) *HTTPDetectorUpdateOne {
	hduo.mutation.SetURL(s)
	return hduo
}

// Mutation returns the HTTPDetectorMutation object of the builder.
func (hduo *HTTPDetectorUpdateOne) Mutation() *HTTPDetectorMutation {
	return hduo.mutation
}

// Save executes the query and returns the updated HTTPDetector entity.
func (hduo *HTTPDetectorUpdateOne) Save(ctx context.Context) (*HTTPDetector, error) {
	var (
		err  error
		node *HTTPDetector
	)
	hduo.defaults()
	if len(hduo.hooks) == 0 {
		if err = hduo.check(); err != nil {
			return nil, err
		}
		node, err = hduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HTTPDetectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hduo.check(); err != nil {
				return nil, err
			}
			hduo.mutation = mutation
			node, err = hduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hduo.hooks) - 1; i >= 0; i-- {
			mut = hduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hduo *HTTPDetectorUpdateOne) SaveX(ctx context.Context) *HTTPDetector {
	node, err := hduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hduo *HTTPDetectorUpdateOne) Exec(ctx context.Context) error {
	_, err := hduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hduo *HTTPDetectorUpdateOne) ExecX(ctx context.Context) {
	if err := hduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hduo *HTTPDetectorUpdateOne) defaults() {
	if _, ok := hduo.mutation.UpdatedAt(); !ok {
		v := httpdetector.UpdateDefaultUpdatedAt()
		hduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hduo *HTTPDetectorUpdateOne) check() error {
	if v, ok := hduo.mutation.Status(); ok {
		if err := httpdetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := hduo.mutation.Name(); ok {
		if err := httpdetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := hduo.mutation.Owner(); ok {
		if err := httpdetector.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if v, ok := hduo.mutation.Timeout(); ok {
		if err := httpdetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	if v, ok := hduo.mutation.URL(); ok {
		if err := httpdetector.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf("ent: validator failed for field \"url\": %w", err)}
		}
	}
	return nil
}

func (hduo *HTTPDetectorUpdateOne) sqlSave(ctx context.Context) (_node *HTTPDetector, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   httpdetector.Table,
			Columns: httpdetector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: httpdetector.FieldID,
			},
		},
	}
	id, ok := hduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing HTTPDetector.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := hduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: httpdetector.FieldUpdatedAt,
		})
	}
	if value, ok := hduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: httpdetector.FieldStatus,
		})
	}
	if value, ok := hduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: httpdetector.FieldStatus,
		})
	}
	if value, ok := hduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldName,
		})
	}
	if value, ok := hduo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldOwner,
		})
	}
	if value, ok := hduo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldDescription,
		})
	}
	if value, ok := hduo.mutation.Receivers(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: httpdetector.FieldReceivers,
		})
	}
	if value, ok := hduo.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldTimeout,
		})
	}
	if value, ok := hduo.mutation.Ips(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: httpdetector.FieldIps,
		})
	}
	if value, ok := hduo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httpdetector.FieldURL,
		})
	}
	_node = &HTTPDetector{config: hduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{httpdetector.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
