// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/httpdetector"
	"github.com/vicanso/cybertect/ent/schema"
)

// HTTPDetector is the model entity for the HTTPDetector schema.
type HTTPDetector struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间，添加记录时由程序自动生成
	CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 更新时间，更新记录时由程序自动生成
	UpdatedAt time.Time `json:"updatedAt,omitempty" sql:"updated_at"`
	// Status holds the value of the "status" field.
	// 状态，默认为启用状态
	Status schema.Status `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	// 配置名称
	Name string `json:"name,omitempty"`
	// Owner holds the value of the "owner" field.
	// 配置拥有者
	Owner string `json:"owner,omitempty"`
	// Description holds the value of the "description" field.
	// 配置描述
	Description string `json:"description,omitempty"`
	// Receivers holds the value of the "receivers" field.
	// 接收者列表
	Receivers []string `json:"receivers,omitempty"`
	// Timeout holds the value of the "timeout" field.
	// 超时设置
	Timeout string `json:"timeout,omitempty"`
	// Ips holds the value of the "ips" field.
	// IP列表
	Ips []string `json:"ips,omitempty"`
	// URL holds the value of the "url" field.
	// 测试URL
	URL string `json:"url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HTTPDetector) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case httpdetector.FieldReceivers, httpdetector.FieldIps:
			values[i] = &[]byte{}
		case httpdetector.FieldID, httpdetector.FieldStatus:
			values[i] = &sql.NullInt64{}
		case httpdetector.FieldName, httpdetector.FieldOwner, httpdetector.FieldDescription, httpdetector.FieldTimeout, httpdetector.FieldURL:
			values[i] = &sql.NullString{}
		case httpdetector.FieldCreatedAt, httpdetector.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type HTTPDetector", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HTTPDetector fields.
func (hd *HTTPDetector) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case httpdetector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hd.ID = int(value.Int64)
		case httpdetector.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hd.CreatedAt = value.Time
			}
		case httpdetector.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hd.UpdatedAt = value.Time
			}
		case httpdetector.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				hd.Status = schema.Status(value.Int64)
			}
		case httpdetector.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hd.Name = value.String
			}
		case httpdetector.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				hd.Owner = value.String
			}
		case httpdetector.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hd.Description = value.String
			}
		case httpdetector.FieldReceivers:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field receivers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hd.Receivers); err != nil {
					return fmt.Errorf("unmarshal field receivers: %w", err)
				}
			}
		case httpdetector.FieldTimeout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				hd.Timeout = value.String
			}
		case httpdetector.FieldIps:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ips", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hd.Ips); err != nil {
					return fmt.Errorf("unmarshal field ips: %w", err)
				}
			}
		case httpdetector.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				hd.URL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this HTTPDetector.
// Note that you need to call HTTPDetector.Unwrap() before calling this method if this HTTPDetector
// was returned from a transaction, and the transaction was committed or rolled back.
func (hd *HTTPDetector) Update() *HTTPDetectorUpdateOne {
	return (&HTTPDetectorClient{config: hd.config}).UpdateOne(hd)
}

// Unwrap unwraps the HTTPDetector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hd *HTTPDetector) Unwrap() *HTTPDetector {
	tx, ok := hd.config.driver.(*txDriver)
	if !ok {
		panic("ent: HTTPDetector is not a transactional entity")
	}
	hd.config.driver = tx.drv
	return hd
}

// String implements the fmt.Stringer.
func (hd *HTTPDetector) String() string {
	var builder strings.Builder
	builder.WriteString("HTTPDetector(")
	builder.WriteString(fmt.Sprintf("id=%v", hd.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(hd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(hd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", hd.Status))
	builder.WriteString(", name=")
	builder.WriteString(hd.Name)
	builder.WriteString(", owner=")
	builder.WriteString(hd.Owner)
	builder.WriteString(", description=")
	builder.WriteString(hd.Description)
	builder.WriteString(", receivers=")
	builder.WriteString(fmt.Sprintf("%v", hd.Receivers))
	builder.WriteString(", timeout=")
	builder.WriteString(hd.Timeout)
	builder.WriteString(", ips=")
	builder.WriteString(fmt.Sprintf("%v", hd.Ips))
	builder.WriteString(", url=")
	builder.WriteString(hd.URL)
	builder.WriteByte(')')
	return builder.String()
}

// HTTPDetectors is a parsable slice of HTTPDetector.
type HTTPDetectors []*HTTPDetector

func (hd HTTPDetectors) config(cfg config) {
	for _i := range hd {
		hd[_i].config = cfg
	}
}
