// Code generated by ent, DO NOT EDIT.

package databasedetector

import (
	"time"

	"github.com/vicanso/cybertect/schema"
)

const (
	// Label holds the string label denoting the databasedetector type in the database.
	Label = "database_detector"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOwners holds the string denoting the owners field in the database.
	FieldOwners = "owners"
	// FieldReceivers holds the string denoting the receivers field in the database.
	FieldReceivers = "receivers"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUris holds the string denoting the uris field in the database.
	FieldUris = "uris"
	// FieldCertPem holds the string denoting the certpem field in the database.
	FieldCertPem = "cert_pem"
	// FieldKeyPem holds the string denoting the keypem field in the database.
	FieldKeyPem = "key_pem"
	// Table holds the table name of the databasedetector in the database.
	Table = "database_detectors"
)

// Columns holds all SQL columns for databasedetector fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldName,
	FieldOwners,
	FieldReceivers,
	FieldTimeout,
	FieldInterval,
	FieldDescription,
	FieldUris,
	FieldCertPem,
	FieldKeyPem,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus schema.Status
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int8) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TimeoutValidator is a validator for the "timeout" field. It is called by the builders before save.
	TimeoutValidator func(string) error
)
