// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/dnsdetector"
	"github.com/vicanso/cybertect/ent/schema"
)

// DNSDetectorCreate is the builder for creating a DNSDetector entity.
type DNSDetectorCreate struct {
	config
	mutation *DNSDetectorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ddc *DNSDetectorCreate) SetCreatedAt(t time.Time) *DNSDetectorCreate {
	ddc.mutation.SetCreatedAt(t)
	return ddc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ddc *DNSDetectorCreate) SetNillableCreatedAt(t *time.Time) *DNSDetectorCreate {
	if t != nil {
		ddc.SetCreatedAt(*t)
	}
	return ddc
}

// SetUpdatedAt sets the "updated_at" field.
func (ddc *DNSDetectorCreate) SetUpdatedAt(t time.Time) *DNSDetectorCreate {
	ddc.mutation.SetUpdatedAt(t)
	return ddc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ddc *DNSDetectorCreate) SetNillableUpdatedAt(t *time.Time) *DNSDetectorCreate {
	if t != nil {
		ddc.SetUpdatedAt(*t)
	}
	return ddc
}

// SetStatus sets the "status" field.
func (ddc *DNSDetectorCreate) SetStatus(s schema.Status) *DNSDetectorCreate {
	ddc.mutation.SetStatus(s)
	return ddc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ddc *DNSDetectorCreate) SetNillableStatus(s *schema.Status) *DNSDetectorCreate {
	if s != nil {
		ddc.SetStatus(*s)
	}
	return ddc
}

// SetName sets the "name" field.
func (ddc *DNSDetectorCreate) SetName(s string) *DNSDetectorCreate {
	ddc.mutation.SetName(s)
	return ddc
}

// SetOwner sets the "owner" field.
func (ddc *DNSDetectorCreate) SetOwner(s string) *DNSDetectorCreate {
	ddc.mutation.SetOwner(s)
	return ddc
}

// SetDescription sets the "description" field.
func (ddc *DNSDetectorCreate) SetDescription(s string) *DNSDetectorCreate {
	ddc.mutation.SetDescription(s)
	return ddc
}

// SetReceivers sets the "receivers" field.
func (ddc *DNSDetectorCreate) SetReceivers(s []string) *DNSDetectorCreate {
	ddc.mutation.SetReceivers(s)
	return ddc
}

// SetTimeout sets the "timeout" field.
func (ddc *DNSDetectorCreate) SetTimeout(s string) *DNSDetectorCreate {
	ddc.mutation.SetTimeout(s)
	return ddc
}

// SetHost sets the "host" field.
func (ddc *DNSDetectorCreate) SetHost(s string) *DNSDetectorCreate {
	ddc.mutation.SetHost(s)
	return ddc
}

// SetIps sets the "ips" field.
func (ddc *DNSDetectorCreate) SetIps(s []string) *DNSDetectorCreate {
	ddc.mutation.SetIps(s)
	return ddc
}

// SetServers sets the "servers" field.
func (ddc *DNSDetectorCreate) SetServers(s []string) *DNSDetectorCreate {
	ddc.mutation.SetServers(s)
	return ddc
}

// Mutation returns the DNSDetectorMutation object of the builder.
func (ddc *DNSDetectorCreate) Mutation() *DNSDetectorMutation {
	return ddc.mutation
}

// Save creates the DNSDetector in the database.
func (ddc *DNSDetectorCreate) Save(ctx context.Context) (*DNSDetector, error) {
	var (
		err  error
		node *DNSDetector
	)
	ddc.defaults()
	if len(ddc.hooks) == 0 {
		if err = ddc.check(); err != nil {
			return nil, err
		}
		node, err = ddc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSDetectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ddc.check(); err != nil {
				return nil, err
			}
			ddc.mutation = mutation
			node, err = ddc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ddc.hooks) - 1; i >= 0; i-- {
			mut = ddc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ddc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ddc *DNSDetectorCreate) SaveX(ctx context.Context) *DNSDetector {
	v, err := ddc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ddc *DNSDetectorCreate) defaults() {
	if _, ok := ddc.mutation.CreatedAt(); !ok {
		v := dnsdetector.DefaultCreatedAt()
		ddc.mutation.SetCreatedAt(v)
	}
	if _, ok := ddc.mutation.UpdatedAt(); !ok {
		v := dnsdetector.DefaultUpdatedAt()
		ddc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ddc.mutation.Status(); !ok {
		v := dnsdetector.DefaultStatus
		ddc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ddc *DNSDetectorCreate) check() error {
	if _, ok := ddc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := ddc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := ddc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := ddc.mutation.Status(); ok {
		if err := dnsdetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := ddc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := ddc.mutation.Name(); ok {
		if err := dnsdetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := ddc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New("ent: missing required field \"owner\"")}
	}
	if v, ok := ddc.mutation.Owner(); ok {
		if err := dnsdetector.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf("ent: validator failed for field \"owner\": %w", err)}
		}
	}
	if _, ok := ddc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	if _, ok := ddc.mutation.Receivers(); !ok {
		return &ValidationError{Name: "receivers", err: errors.New("ent: missing required field \"receivers\"")}
	}
	if _, ok := ddc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New("ent: missing required field \"timeout\"")}
	}
	if v, ok := ddc.mutation.Timeout(); ok {
		if err := dnsdetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	if _, ok := ddc.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New("ent: missing required field \"host\"")}
	}
	if v, ok := ddc.mutation.Host(); ok {
		if err := dnsdetector.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf("ent: validator failed for field \"host\": %w", err)}
		}
	}
	if _, ok := ddc.mutation.Ips(); !ok {
		return &ValidationError{Name: "ips", err: errors.New("ent: missing required field \"ips\"")}
	}
	if _, ok := ddc.mutation.Servers(); !ok {
		return &ValidationError{Name: "servers", err: errors.New("ent: missing required field \"servers\"")}
	}
	return nil
}

func (ddc *DNSDetectorCreate) sqlSave(ctx context.Context) (*DNSDetector, error) {
	_node, _spec := ddc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ddc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ddc *DNSDetectorCreate) createSpec() (*DNSDetector, *sqlgraph.CreateSpec) {
	var (
		_node = &DNSDetector{config: ddc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dnsdetector.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dnsdetector.FieldID,
			},
		}
	)
	if value, ok := ddc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dnsdetector.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ddc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dnsdetector.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ddc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dnsdetector.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ddc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsdetector.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ddc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsdetector.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := ddc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsdetector.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ddc.mutation.Receivers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dnsdetector.FieldReceivers,
		})
		_node.Receivers = value
	}
	if value, ok := ddc.mutation.Timeout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsdetector.FieldTimeout,
		})
		_node.Timeout = value
	}
	if value, ok := ddc.mutation.Host(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsdetector.FieldHost,
		})
		_node.Host = value
	}
	if value, ok := ddc.mutation.Ips(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dnsdetector.FieldIps,
		})
		_node.Ips = value
	}
	if value, ok := ddc.mutation.Servers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dnsdetector.FieldServers,
		})
		_node.Servers = value
	}
	return _node, _spec
}

// DNSDetectorCreateBulk is the builder for creating many DNSDetector entities in bulk.
type DNSDetectorCreateBulk struct {
	config
	builders []*DNSDetectorCreate
}

// Save creates the DNSDetector entities in the database.
func (ddcb *DNSDetectorCreateBulk) Save(ctx context.Context) ([]*DNSDetector, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ddcb.builders))
	nodes := make([]*DNSDetector, len(ddcb.builders))
	mutators := make([]Mutator, len(ddcb.builders))
	for i := range ddcb.builders {
		func(i int, root context.Context) {
			builder := ddcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DNSDetectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ddcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ddcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ddcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ddcb *DNSDetectorCreateBulk) SaveX(ctx context.Context) []*DNSDetector {
	v, err := ddcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
