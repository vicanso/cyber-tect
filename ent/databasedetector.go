// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/databasedetector"
	"github.com/vicanso/cybertect/schema"
)

// DatabaseDetector is the model entity for the DatabaseDetector schema.
type DatabaseDetector struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间，添加记录时由程序自动生成
	CreatedAt time.Time `json:"createdAt" sql:"created_at"`
	// 更新时间，更新记录时由程序自动生成
	UpdatedAt time.Time `json:"updatedAt" sql:"updated_at"`
	// 状态，默认为启用状态
	Status schema.Status `json:"status,omitempty"`
	// 配置名称
	Name string `json:"name,omitempty"`
	// 配置拥有者
	Owners []string `json:"owners,omitempty"`
	// 接收者列表
	Receivers []string `json:"receivers,omitempty"`
	// 超时设置
	Timeout string `json:"timeout,omitempty"`
	// 检测间隔
	Interval string `json:"interval,omitempty"`
	// 配置描述
	Description string `json:"description,omitempty"`
	// redis连接串列表
	Uris []string `json:"uris,omitempty"`
	// cert pem block数据
	CertPem string `json:"certPem,omitempty"`
	// key pem block数据
	KeyPem string `json:"keyPem,omitempty"`

	// 状态描述
	StatusDesc string `json:"statusDesc,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DatabaseDetector) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case databasedetector.FieldOwners, databasedetector.FieldReceivers, databasedetector.FieldUris:
			values[i] = new([]byte)
		case databasedetector.FieldID, databasedetector.FieldStatus:
			values[i] = new(sql.NullInt64)
		case databasedetector.FieldName, databasedetector.FieldTimeout, databasedetector.FieldInterval, databasedetector.FieldDescription, databasedetector.FieldCertPem, databasedetector.FieldKeyPem:
			values[i] = new(sql.NullString)
		case databasedetector.FieldCreatedAt, databasedetector.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DatabaseDetector", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DatabaseDetector fields.
func (dd *DatabaseDetector) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case databasedetector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dd.ID = int(value.Int64)
		case databasedetector.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dd.CreatedAt = value.Time
			}
		case databasedetector.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dd.UpdatedAt = value.Time
			}
		case databasedetector.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dd.Status = schema.Status(value.Int64)
			}
		case databasedetector.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dd.Name = value.String
			}
		case databasedetector.FieldOwners:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owners", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dd.Owners); err != nil {
					return fmt.Errorf("unmarshal field owners: %w", err)
				}
			}
		case databasedetector.FieldReceivers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field receivers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dd.Receivers); err != nil {
					return fmt.Errorf("unmarshal field receivers: %w", err)
				}
			}
		case databasedetector.FieldTimeout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				dd.Timeout = value.String
			}
		case databasedetector.FieldInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				dd.Interval = value.String
			}
		case databasedetector.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dd.Description = value.String
			}
		case databasedetector.FieldUris:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field uris", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dd.Uris); err != nil {
					return fmt.Errorf("unmarshal field uris: %w", err)
				}
			}
		case databasedetector.FieldCertPem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certPem", values[i])
			} else if value.Valid {
				dd.CertPem = value.String
			}
		case databasedetector.FieldKeyPem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keyPem", values[i])
			} else if value.Valid {
				dd.KeyPem = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DatabaseDetector.
// Note that you need to call DatabaseDetector.Unwrap() before calling this method if this DatabaseDetector
// was returned from a transaction, and the transaction was committed or rolled back.
func (dd *DatabaseDetector) Update() *DatabaseDetectorUpdateOne {
	return (&DatabaseDetectorClient{config: dd.config}).UpdateOne(dd)
}

// Unwrap unwraps the DatabaseDetector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dd *DatabaseDetector) Unwrap() *DatabaseDetector {
	_tx, ok := dd.config.driver.(*txDriver)
	if !ok {
		panic("ent: DatabaseDetector is not a transactional entity")
	}
	dd.config.driver = _tx.drv
	return dd
}

// String implements the fmt.Stringer.
func (dd *DatabaseDetector) String() string {
	var builder strings.Builder
	builder.WriteString("DatabaseDetector(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", dd.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dd.Name)
	builder.WriteString(", ")
	builder.WriteString("owners=")
	builder.WriteString(fmt.Sprintf("%v", dd.Owners))
	builder.WriteString(", ")
	builder.WriteString("receivers=")
	builder.WriteString(fmt.Sprintf("%v", dd.Receivers))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(dd.Timeout)
	builder.WriteString(", ")
	builder.WriteString("interval=")
	builder.WriteString(dd.Interval)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dd.Description)
	builder.WriteString(", ")
	builder.WriteString("uris=")
	builder.WriteString(fmt.Sprintf("%v", dd.Uris))
	builder.WriteString(", ")
	builder.WriteString("certPem=")
	builder.WriteString(dd.CertPem)
	builder.WriteString(", ")
	builder.WriteString("keyPem=")
	builder.WriteString(dd.KeyPem)
	builder.WriteByte(')')
	return builder.String()
}

// DatabaseDetectors is a parsable slice of DatabaseDetector.
type DatabaseDetectors []*DatabaseDetector

func (dd DatabaseDetectors) config(cfg config) {
	for _i := range dd {
		dd[_i].config = cfg
	}
}
