// Code generated by ent, DO NOT EDIT.

package databasedetector

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v schema.Status) predicate.DatabaseDetector {
	vc := int8(v)
	return predicate.DatabaseDetector(sql.FieldEQ(FieldStatus, vc))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldName, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldTimeout, v))
}

// Interval applies equality check predicate on the "interval" field. It's identical to IntervalEQ.
func Interval(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldInterval, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldDescription, v))
}

// CertPem applies equality check predicate on the "certPem" field. It's identical to CertPemEQ.
func CertPem(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldCertPem, v))
}

// KeyPem applies equality check predicate on the "keyPem" field. It's identical to KeyPemEQ.
func KeyPem(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldKeyPem, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schema.Status) predicate.DatabaseDetector {
	vc := int8(v)
	return predicate.DatabaseDetector(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schema.Status) predicate.DatabaseDetector {
	vc := int8(v)
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schema.Status) predicate.DatabaseDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.DatabaseDetector(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schema.Status) predicate.DatabaseDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v schema.Status) predicate.DatabaseDetector {
	vc := int8(v)
	return predicate.DatabaseDetector(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v schema.Status) predicate.DatabaseDetector {
	vc := int8(v)
	return predicate.DatabaseDetector(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v schema.Status) predicate.DatabaseDetector {
	vc := int8(v)
	return predicate.DatabaseDetector(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v schema.Status) predicate.DatabaseDetector {
	vc := int8(v)
	return predicate.DatabaseDetector(sql.FieldLTE(FieldStatus, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContainsFold(FieldName, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldTimeout, v))
}

// TimeoutContains applies the Contains predicate on the "timeout" field.
func TimeoutContains(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContains(FieldTimeout, v))
}

// TimeoutHasPrefix applies the HasPrefix predicate on the "timeout" field.
func TimeoutHasPrefix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasPrefix(FieldTimeout, v))
}

// TimeoutHasSuffix applies the HasSuffix predicate on the "timeout" field.
func TimeoutHasSuffix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasSuffix(FieldTimeout, v))
}

// TimeoutEqualFold applies the EqualFold predicate on the "timeout" field.
func TimeoutEqualFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEqualFold(FieldTimeout, v))
}

// TimeoutContainsFold applies the ContainsFold predicate on the "timeout" field.
func TimeoutContainsFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContainsFold(FieldTimeout, v))
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldInterval, v))
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldInterval, v))
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldInterval, vs...))
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldInterval, vs...))
}

// IntervalGT applies the GT predicate on the "interval" field.
func IntervalGT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldInterval, v))
}

// IntervalGTE applies the GTE predicate on the "interval" field.
func IntervalGTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldInterval, v))
}

// IntervalLT applies the LT predicate on the "interval" field.
func IntervalLT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldInterval, v))
}

// IntervalLTE applies the LTE predicate on the "interval" field.
func IntervalLTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldInterval, v))
}

// IntervalContains applies the Contains predicate on the "interval" field.
func IntervalContains(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContains(FieldInterval, v))
}

// IntervalHasPrefix applies the HasPrefix predicate on the "interval" field.
func IntervalHasPrefix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasPrefix(FieldInterval, v))
}

// IntervalHasSuffix applies the HasSuffix predicate on the "interval" field.
func IntervalHasSuffix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasSuffix(FieldInterval, v))
}

// IntervalIsNil applies the IsNil predicate on the "interval" field.
func IntervalIsNil() predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIsNull(FieldInterval))
}

// IntervalNotNil applies the NotNil predicate on the "interval" field.
func IntervalNotNil() predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotNull(FieldInterval))
}

// IntervalEqualFold applies the EqualFold predicate on the "interval" field.
func IntervalEqualFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEqualFold(FieldInterval, v))
}

// IntervalContainsFold applies the ContainsFold predicate on the "interval" field.
func IntervalContainsFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContainsFold(FieldInterval, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContainsFold(FieldDescription, v))
}

// CertPemEQ applies the EQ predicate on the "certPem" field.
func CertPemEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldCertPem, v))
}

// CertPemNEQ applies the NEQ predicate on the "certPem" field.
func CertPemNEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldCertPem, v))
}

// CertPemIn applies the In predicate on the "certPem" field.
func CertPemIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldCertPem, vs...))
}

// CertPemNotIn applies the NotIn predicate on the "certPem" field.
func CertPemNotIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldCertPem, vs...))
}

// CertPemGT applies the GT predicate on the "certPem" field.
func CertPemGT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldCertPem, v))
}

// CertPemGTE applies the GTE predicate on the "certPem" field.
func CertPemGTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldCertPem, v))
}

// CertPemLT applies the LT predicate on the "certPem" field.
func CertPemLT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldCertPem, v))
}

// CertPemLTE applies the LTE predicate on the "certPem" field.
func CertPemLTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldCertPem, v))
}

// CertPemContains applies the Contains predicate on the "certPem" field.
func CertPemContains(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContains(FieldCertPem, v))
}

// CertPemHasPrefix applies the HasPrefix predicate on the "certPem" field.
func CertPemHasPrefix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasPrefix(FieldCertPem, v))
}

// CertPemHasSuffix applies the HasSuffix predicate on the "certPem" field.
func CertPemHasSuffix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasSuffix(FieldCertPem, v))
}

// CertPemIsNil applies the IsNil predicate on the "certPem" field.
func CertPemIsNil() predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIsNull(FieldCertPem))
}

// CertPemNotNil applies the NotNil predicate on the "certPem" field.
func CertPemNotNil() predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotNull(FieldCertPem))
}

// CertPemEqualFold applies the EqualFold predicate on the "certPem" field.
func CertPemEqualFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEqualFold(FieldCertPem, v))
}

// CertPemContainsFold applies the ContainsFold predicate on the "certPem" field.
func CertPemContainsFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContainsFold(FieldCertPem, v))
}

// KeyPemEQ applies the EQ predicate on the "keyPem" field.
func KeyPemEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEQ(FieldKeyPem, v))
}

// KeyPemNEQ applies the NEQ predicate on the "keyPem" field.
func KeyPemNEQ(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNEQ(FieldKeyPem, v))
}

// KeyPemIn applies the In predicate on the "keyPem" field.
func KeyPemIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIn(FieldKeyPem, vs...))
}

// KeyPemNotIn applies the NotIn predicate on the "keyPem" field.
func KeyPemNotIn(vs ...string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotIn(FieldKeyPem, vs...))
}

// KeyPemGT applies the GT predicate on the "keyPem" field.
func KeyPemGT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGT(FieldKeyPem, v))
}

// KeyPemGTE applies the GTE predicate on the "keyPem" field.
func KeyPemGTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldGTE(FieldKeyPem, v))
}

// KeyPemLT applies the LT predicate on the "keyPem" field.
func KeyPemLT(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLT(FieldKeyPem, v))
}

// KeyPemLTE applies the LTE predicate on the "keyPem" field.
func KeyPemLTE(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldLTE(FieldKeyPem, v))
}

// KeyPemContains applies the Contains predicate on the "keyPem" field.
func KeyPemContains(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContains(FieldKeyPem, v))
}

// KeyPemHasPrefix applies the HasPrefix predicate on the "keyPem" field.
func KeyPemHasPrefix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasPrefix(FieldKeyPem, v))
}

// KeyPemHasSuffix applies the HasSuffix predicate on the "keyPem" field.
func KeyPemHasSuffix(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldHasSuffix(FieldKeyPem, v))
}

// KeyPemIsNil applies the IsNil predicate on the "keyPem" field.
func KeyPemIsNil() predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldIsNull(FieldKeyPem))
}

// KeyPemNotNil applies the NotNil predicate on the "keyPem" field.
func KeyPemNotNil() predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldNotNull(FieldKeyPem))
}

// KeyPemEqualFold applies the EqualFold predicate on the "keyPem" field.
func KeyPemEqualFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldEqualFold(FieldKeyPem, v))
}

// KeyPemContainsFold applies the ContainsFold predicate on the "keyPem" field.
func KeyPemContainsFold(v string) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(sql.FieldContainsFold(FieldKeyPem, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DatabaseDetector) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DatabaseDetector) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DatabaseDetector) predicate.DatabaseDetector {
	return predicate.DatabaseDetector(func(s *sql.Selector) {
		p(s.Not())
	})
}
