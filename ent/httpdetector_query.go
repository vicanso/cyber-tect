// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/httpdetector"
	"github.com/vicanso/cybertect/ent/predicate"
)

// HTTPDetectorQuery is the builder for querying HTTPDetector entities.
type HTTPDetectorQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.HTTPDetector
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HTTPDetectorQuery builder.
func (hdq *HTTPDetectorQuery) Where(ps ...predicate.HTTPDetector) *HTTPDetectorQuery {
	hdq.predicates = append(hdq.predicates, ps...)
	return hdq
}

// Limit adds a limit step to the query.
func (hdq *HTTPDetectorQuery) Limit(limit int) *HTTPDetectorQuery {
	hdq.limit = &limit
	return hdq
}

// Offset adds an offset step to the query.
func (hdq *HTTPDetectorQuery) Offset(offset int) *HTTPDetectorQuery {
	hdq.offset = &offset
	return hdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hdq *HTTPDetectorQuery) Unique(unique bool) *HTTPDetectorQuery {
	hdq.unique = &unique
	return hdq
}

// Order adds an order step to the query.
func (hdq *HTTPDetectorQuery) Order(o ...OrderFunc) *HTTPDetectorQuery {
	hdq.order = append(hdq.order, o...)
	return hdq
}

// First returns the first HTTPDetector entity from the query.
// Returns a *NotFoundError when no HTTPDetector was found.
func (hdq *HTTPDetectorQuery) First(ctx context.Context) (*HTTPDetector, error) {
	nodes, err := hdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{httpdetector.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) FirstX(ctx context.Context) *HTTPDetector {
	node, err := hdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HTTPDetector ID from the query.
// Returns a *NotFoundError when no HTTPDetector ID was found.
func (hdq *HTTPDetectorQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{httpdetector.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) FirstIDX(ctx context.Context) int {
	id, err := hdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HTTPDetector entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HTTPDetector entity is found.
// Returns a *NotFoundError when no HTTPDetector entities are found.
func (hdq *HTTPDetectorQuery) Only(ctx context.Context) (*HTTPDetector, error) {
	nodes, err := hdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{httpdetector.Label}
	default:
		return nil, &NotSingularError{httpdetector.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) OnlyX(ctx context.Context) *HTTPDetector {
	node, err := hdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HTTPDetector ID in the query.
// Returns a *NotSingularError when more than one HTTPDetector ID is found.
// Returns a *NotFoundError when no entities are found.
func (hdq *HTTPDetectorQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{httpdetector.Label}
	default:
		err = &NotSingularError{httpdetector.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) OnlyIDX(ctx context.Context) int {
	id, err := hdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HTTPDetectors.
func (hdq *HTTPDetectorQuery) All(ctx context.Context) ([]*HTTPDetector, error) {
	if err := hdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return hdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) AllX(ctx context.Context) []*HTTPDetector {
	nodes, err := hdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HTTPDetector IDs.
func (hdq *HTTPDetectorQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := hdq.Select(httpdetector.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) IDsX(ctx context.Context) []int {
	ids, err := hdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hdq *HTTPDetectorQuery) Count(ctx context.Context) (int, error) {
	if err := hdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return hdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) CountX(ctx context.Context) int {
	count, err := hdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hdq *HTTPDetectorQuery) Exist(ctx context.Context) (bool, error) {
	if err := hdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return hdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (hdq *HTTPDetectorQuery) ExistX(ctx context.Context) bool {
	exist, err := hdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HTTPDetectorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hdq *HTTPDetectorQuery) Clone() *HTTPDetectorQuery {
	if hdq == nil {
		return nil
	}
	return &HTTPDetectorQuery{
		config:     hdq.config,
		limit:      hdq.limit,
		offset:     hdq.offset,
		order:      append([]OrderFunc{}, hdq.order...),
		predicates: append([]predicate.HTTPDetector{}, hdq.predicates...),
		// clone intermediate query.
		sql:    hdq.sql.Clone(),
		path:   hdq.path,
		unique: hdq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt" sql:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HTTPDetector.Query().
//		GroupBy(httpdetector.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hdq *HTTPDetectorQuery) GroupBy(field string, fields ...string) *HTTPDetectorGroupBy {
	grbuild := &HTTPDetectorGroupBy{config: hdq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := hdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return hdq.sqlQuery(ctx), nil
	}
	grbuild.label = httpdetector.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt" sql:"created_at"`
//	}
//
//	client.HTTPDetector.Query().
//		Select(httpdetector.FieldCreatedAt).
//		Scan(ctx, &v)
func (hdq *HTTPDetectorQuery) Select(fields ...string) *HTTPDetectorSelect {
	hdq.fields = append(hdq.fields, fields...)
	selbuild := &HTTPDetectorSelect{HTTPDetectorQuery: hdq}
	selbuild.label = httpdetector.Label
	selbuild.flds, selbuild.scan = &hdq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a HTTPDetectorSelect configured with the given aggregations.
func (hdq *HTTPDetectorQuery) Aggregate(fns ...AggregateFunc) *HTTPDetectorSelect {
	return hdq.Select().Aggregate(fns...)
}

func (hdq *HTTPDetectorQuery) prepareQuery(ctx context.Context) error {
	for _, f := range hdq.fields {
		if !httpdetector.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hdq.path != nil {
		prev, err := hdq.path(ctx)
		if err != nil {
			return err
		}
		hdq.sql = prev
	}
	return nil
}

func (hdq *HTTPDetectorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HTTPDetector, error) {
	var (
		nodes = []*HTTPDetector{}
		_spec = hdq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HTTPDetector).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HTTPDetector{config: hdq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(hdq.modifiers) > 0 {
		_spec.Modifiers = hdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (hdq *HTTPDetectorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hdq.querySpec()
	if len(hdq.modifiers) > 0 {
		_spec.Modifiers = hdq.modifiers
	}
	_spec.Node.Columns = hdq.fields
	if len(hdq.fields) > 0 {
		_spec.Unique = hdq.unique != nil && *hdq.unique
	}
	return sqlgraph.CountNodes(ctx, hdq.driver, _spec)
}

func (hdq *HTTPDetectorQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := hdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (hdq *HTTPDetectorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   httpdetector.Table,
			Columns: httpdetector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: httpdetector.FieldID,
			},
		},
		From:   hdq.sql,
		Unique: true,
	}
	if unique := hdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := hdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, httpdetector.FieldID)
		for i := range fields {
			if fields[i] != httpdetector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hdq *HTTPDetectorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hdq.driver.Dialect())
	t1 := builder.Table(httpdetector.Table)
	columns := hdq.fields
	if len(columns) == 0 {
		columns = httpdetector.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hdq.sql != nil {
		selector = hdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hdq.unique != nil && *hdq.unique {
		selector.Distinct()
	}
	for _, m := range hdq.modifiers {
		m(selector)
	}
	for _, p := range hdq.predicates {
		p(selector)
	}
	for _, p := range hdq.order {
		p(selector)
	}
	if offset := hdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (hdq *HTTPDetectorQuery) Modify(modifiers ...func(s *sql.Selector)) *HTTPDetectorSelect {
	hdq.modifiers = append(hdq.modifiers, modifiers...)
	return hdq.Select()
}

// HTTPDetectorGroupBy is the group-by builder for HTTPDetector entities.
type HTTPDetectorGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hdgb *HTTPDetectorGroupBy) Aggregate(fns ...AggregateFunc) *HTTPDetectorGroupBy {
	hdgb.fns = append(hdgb.fns, fns...)
	return hdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (hdgb *HTTPDetectorGroupBy) Scan(ctx context.Context, v any) error {
	query, err := hdgb.path(ctx)
	if err != nil {
		return err
	}
	hdgb.sql = query
	return hdgb.sqlScan(ctx, v)
}

func (hdgb *HTTPDetectorGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range hdgb.fields {
		if !httpdetector.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := hdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hdgb *HTTPDetectorGroupBy) sqlQuery() *sql.Selector {
	selector := hdgb.sql.Select()
	aggregation := make([]string, 0, len(hdgb.fns))
	for _, fn := range hdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(hdgb.fields)+len(hdgb.fns))
		for _, f := range hdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(hdgb.fields...)...)
}

// HTTPDetectorSelect is the builder for selecting fields of HTTPDetector entities.
type HTTPDetectorSelect struct {
	*HTTPDetectorQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hds *HTTPDetectorSelect) Aggregate(fns ...AggregateFunc) *HTTPDetectorSelect {
	hds.fns = append(hds.fns, fns...)
	return hds
}

// Scan applies the selector query and scans the result into the given value.
func (hds *HTTPDetectorSelect) Scan(ctx context.Context, v any) error {
	if err := hds.prepareQuery(ctx); err != nil {
		return err
	}
	hds.sql = hds.HTTPDetectorQuery.sqlQuery(ctx)
	return hds.sqlScan(ctx, v)
}

func (hds *HTTPDetectorSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(hds.fns))
	for _, fn := range hds.fns {
		aggregation = append(aggregation, fn(hds.sql))
	}
	switch n := len(*hds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		hds.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		hds.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := hds.sql.Query()
	if err := hds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (hds *HTTPDetectorSelect) Modify(modifiers ...func(s *sql.Selector)) *HTTPDetectorSelect {
	hds.modifiers = append(hds.modifiers, modifiers...)
	return hds
}
