// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/ent/tcpdetectorresult"
)

// TCPDetectorResultQuery is the builder for querying TCPDetectorResult entities.
type TCPDetectorResultQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.TCPDetectorResult
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TCPDetectorResultQuery builder.
func (tdrq *TCPDetectorResultQuery) Where(ps ...predicate.TCPDetectorResult) *TCPDetectorResultQuery {
	tdrq.predicates = append(tdrq.predicates, ps...)
	return tdrq
}

// Limit adds a limit step to the query.
func (tdrq *TCPDetectorResultQuery) Limit(limit int) *TCPDetectorResultQuery {
	tdrq.limit = &limit
	return tdrq
}

// Offset adds an offset step to the query.
func (tdrq *TCPDetectorResultQuery) Offset(offset int) *TCPDetectorResultQuery {
	tdrq.offset = &offset
	return tdrq
}

// Order adds an order step to the query.
func (tdrq *TCPDetectorResultQuery) Order(o ...OrderFunc) *TCPDetectorResultQuery {
	tdrq.order = append(tdrq.order, o...)
	return tdrq
}

// First returns the first TCPDetectorResult entity from the query.
// Returns a *NotFoundError when no TCPDetectorResult was found.
func (tdrq *TCPDetectorResultQuery) First(ctx context.Context) (*TCPDetectorResult, error) {
	nodes, err := tdrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tcpdetectorresult.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) FirstX(ctx context.Context) *TCPDetectorResult {
	node, err := tdrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TCPDetectorResult ID from the query.
// Returns a *NotFoundError when no TCPDetectorResult ID was found.
func (tdrq *TCPDetectorResultQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tdrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tcpdetectorresult.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) FirstIDX(ctx context.Context) int {
	id, err := tdrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TCPDetectorResult entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TCPDetectorResult entity is not found.
// Returns a *NotFoundError when no TCPDetectorResult entities are found.
func (tdrq *TCPDetectorResultQuery) Only(ctx context.Context) (*TCPDetectorResult, error) {
	nodes, err := tdrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tcpdetectorresult.Label}
	default:
		return nil, &NotSingularError{tcpdetectorresult.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) OnlyX(ctx context.Context) *TCPDetectorResult {
	node, err := tdrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TCPDetectorResult ID in the query.
// Returns a *NotSingularError when exactly one TCPDetectorResult ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tdrq *TCPDetectorResultQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tdrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = &NotSingularError{tcpdetectorresult.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) OnlyIDX(ctx context.Context) int {
	id, err := tdrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TCPDetectorResults.
func (tdrq *TCPDetectorResultQuery) All(ctx context.Context) ([]*TCPDetectorResult, error) {
	if err := tdrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tdrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) AllX(ctx context.Context) []*TCPDetectorResult {
	nodes, err := tdrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TCPDetectorResult IDs.
func (tdrq *TCPDetectorResultQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tdrq.Select(tcpdetectorresult.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) IDsX(ctx context.Context) []int {
	ids, err := tdrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tdrq *TCPDetectorResultQuery) Count(ctx context.Context) (int, error) {
	if err := tdrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tdrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) CountX(ctx context.Context) int {
	count, err := tdrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tdrq *TCPDetectorResultQuery) Exist(ctx context.Context) (bool, error) {
	if err := tdrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tdrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tdrq *TCPDetectorResultQuery) ExistX(ctx context.Context) bool {
	exist, err := tdrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TCPDetectorResultQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tdrq *TCPDetectorResultQuery) Clone() *TCPDetectorResultQuery {
	if tdrq == nil {
		return nil
	}
	return &TCPDetectorResultQuery{
		config:     tdrq.config,
		limit:      tdrq.limit,
		offset:     tdrq.offset,
		order:      append([]OrderFunc{}, tdrq.order...),
		predicates: append([]predicate.TCPDetectorResult{}, tdrq.predicates...),
		// clone intermediate query.
		sql:  tdrq.sql.Clone(),
		path: tdrq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TCPDetectorResult.Query().
//		GroupBy(tcpdetectorresult.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tdrq *TCPDetectorResultQuery) GroupBy(field string, fields ...string) *TCPDetectorResultGroupBy {
	group := &TCPDetectorResultGroupBy{config: tdrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tdrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tdrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
//	}
//
//	client.TCPDetectorResult.Query().
//		Select(tcpdetectorresult.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (tdrq *TCPDetectorResultQuery) Select(field string, fields ...string) *TCPDetectorResultSelect {
	tdrq.fields = append([]string{field}, fields...)
	return &TCPDetectorResultSelect{TCPDetectorResultQuery: tdrq}
}

func (tdrq *TCPDetectorResultQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tdrq.fields {
		if !tcpdetectorresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tdrq.path != nil {
		prev, err := tdrq.path(ctx)
		if err != nil {
			return err
		}
		tdrq.sql = prev
	}
	return nil
}

func (tdrq *TCPDetectorResultQuery) sqlAll(ctx context.Context) ([]*TCPDetectorResult, error) {
	var (
		nodes = []*TCPDetectorResult{}
		_spec = tdrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TCPDetectorResult{config: tdrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tdrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (tdrq *TCPDetectorResultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tdrq.querySpec()
	return sqlgraph.CountNodes(ctx, tdrq.driver, _spec)
}

func (tdrq *TCPDetectorResultQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tdrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tdrq *TCPDetectorResultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tcpdetectorresult.Table,
			Columns: tcpdetectorresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tcpdetectorresult.FieldID,
			},
		},
		From:   tdrq.sql,
		Unique: true,
	}
	if fields := tdrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tcpdetectorresult.FieldID)
		for i := range fields {
			if fields[i] != tcpdetectorresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tdrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tdrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tdrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tdrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, tcpdetectorresult.ValidColumn)
			}
		}
	}
	return _spec
}

func (tdrq *TCPDetectorResultQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tdrq.driver.Dialect())
	t1 := builder.Table(tcpdetectorresult.Table)
	selector := builder.Select(t1.Columns(tcpdetectorresult.Columns...)...).From(t1)
	if tdrq.sql != nil {
		selector = tdrq.sql
		selector.Select(selector.Columns(tcpdetectorresult.Columns...)...)
	}
	for _, p := range tdrq.predicates {
		p(selector)
	}
	for _, p := range tdrq.order {
		p(selector, tcpdetectorresult.ValidColumn)
	}
	if offset := tdrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tdrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TCPDetectorResultGroupBy is the group-by builder for TCPDetectorResult entities.
type TCPDetectorResultGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tdrgb *TCPDetectorResultGroupBy) Aggregate(fns ...AggregateFunc) *TCPDetectorResultGroupBy {
	tdrgb.fns = append(tdrgb.fns, fns...)
	return tdrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tdrgb *TCPDetectorResultGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tdrgb.path(ctx)
	if err != nil {
		return err
	}
	tdrgb.sql = query
	return tdrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tdrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tdrgb.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tdrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) StringsX(ctx context.Context) []string {
	v, err := tdrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tdrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) StringX(ctx context.Context) string {
	v, err := tdrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tdrgb.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tdrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) IntsX(ctx context.Context) []int {
	v, err := tdrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tdrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) IntX(ctx context.Context) int {
	v, err := tdrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tdrgb.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tdrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tdrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tdrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tdrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tdrgb.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tdrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tdrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tdrgb *TCPDetectorResultGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tdrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tdrgb *TCPDetectorResultGroupBy) BoolX(ctx context.Context) bool {
	v, err := tdrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tdrgb *TCPDetectorResultGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tdrgb.fields {
		if !tcpdetectorresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tdrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tdrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tdrgb *TCPDetectorResultGroupBy) sqlQuery() *sql.Selector {
	selector := tdrgb.sql
	columns := make([]string, 0, len(tdrgb.fields)+len(tdrgb.fns))
	columns = append(columns, tdrgb.fields...)
	for _, fn := range tdrgb.fns {
		columns = append(columns, fn(selector, tcpdetectorresult.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(tdrgb.fields...)
}

// TCPDetectorResultSelect is the builder for selecting fields of TCPDetectorResult entities.
type TCPDetectorResultSelect struct {
	*TCPDetectorResultQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tdrs *TCPDetectorResultSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tdrs.prepareQuery(ctx); err != nil {
		return err
	}
	tdrs.sql = tdrs.TCPDetectorResultQuery.sqlQuery(ctx)
	return tdrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tdrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tdrs.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tdrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) StringsX(ctx context.Context) []string {
	v, err := tdrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tdrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) StringX(ctx context.Context) string {
	v, err := tdrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tdrs.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tdrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) IntsX(ctx context.Context) []int {
	v, err := tdrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tdrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) IntX(ctx context.Context) int {
	v, err := tdrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tdrs.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tdrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tdrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tdrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) Float64X(ctx context.Context) float64 {
	v, err := tdrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tdrs.fields) > 1 {
		return nil, errors.New("ent: TCPDetectorResultSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tdrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) BoolsX(ctx context.Context) []bool {
	v, err := tdrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tdrs *TCPDetectorResultSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tdrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tcpdetectorresult.Label}
	default:
		err = fmt.Errorf("ent: TCPDetectorResultSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tdrs *TCPDetectorResultSelect) BoolX(ctx context.Context) bool {
	v, err := tdrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tdrs *TCPDetectorResultSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tdrs.sqlQuery().Query()
	if err := tdrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tdrs *TCPDetectorResultSelect) sqlQuery() sql.Querier {
	selector := tdrs.sql
	selector.Select(selector.Columns(tdrs.fields...)...)
	return selector
}
