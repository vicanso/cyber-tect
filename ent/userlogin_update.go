// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/ent/userlogin"
)

// UserLoginUpdate is the builder for updating UserLogin entities.
type UserLoginUpdate struct {
	config
	hooks     []Hook
	mutation  *UserLoginMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserLoginUpdate builder.
func (ulu *UserLoginUpdate) Where(ps ...predicate.UserLogin) *UserLoginUpdate {
	ulu.mutation.Where(ps...)
	return ulu
}

// SetUserAgent sets the "user_agent" field.
func (ulu *UserLoginUpdate) SetUserAgent(s string) *UserLoginUpdate {
	ulu.mutation.SetUserAgent(s)
	return ulu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableUserAgent(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetUserAgent(*s)
	}
	return ulu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (ulu *UserLoginUpdate) ClearUserAgent() *UserLoginUpdate {
	ulu.mutation.ClearUserAgent()
	return ulu
}

// SetIP sets the "ip" field.
func (ulu *UserLoginUpdate) SetIP(s string) *UserLoginUpdate {
	ulu.mutation.SetIP(s)
	return ulu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableIP(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetIP(*s)
	}
	return ulu
}

// ClearIP clears the value of the "ip" field.
func (ulu *UserLoginUpdate) ClearIP() *UserLoginUpdate {
	ulu.mutation.ClearIP()
	return ulu
}

// SetTrackID sets the "track_id" field.
func (ulu *UserLoginUpdate) SetTrackID(s string) *UserLoginUpdate {
	ulu.mutation.SetTrackID(s)
	return ulu
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableTrackID(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetTrackID(*s)
	}
	return ulu
}

// ClearTrackID clears the value of the "track_id" field.
func (ulu *UserLoginUpdate) ClearTrackID() *UserLoginUpdate {
	ulu.mutation.ClearTrackID()
	return ulu
}

// SetSessionID sets the "session_id" field.
func (ulu *UserLoginUpdate) SetSessionID(s string) *UserLoginUpdate {
	ulu.mutation.SetSessionID(s)
	return ulu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableSessionID(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetSessionID(*s)
	}
	return ulu
}

// ClearSessionID clears the value of the "session_id" field.
func (ulu *UserLoginUpdate) ClearSessionID() *UserLoginUpdate {
	ulu.mutation.ClearSessionID()
	return ulu
}

// SetXForwardedFor sets the "x_forwarded_for" field.
func (ulu *UserLoginUpdate) SetXForwardedFor(s string) *UserLoginUpdate {
	ulu.mutation.SetXForwardedFor(s)
	return ulu
}

// SetNillableXForwardedFor sets the "x_forwarded_for" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableXForwardedFor(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetXForwardedFor(*s)
	}
	return ulu
}

// ClearXForwardedFor clears the value of the "x_forwarded_for" field.
func (ulu *UserLoginUpdate) ClearXForwardedFor() *UserLoginUpdate {
	ulu.mutation.ClearXForwardedFor()
	return ulu
}

// SetCountry sets the "country" field.
func (ulu *UserLoginUpdate) SetCountry(s string) *UserLoginUpdate {
	ulu.mutation.SetCountry(s)
	return ulu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableCountry(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetCountry(*s)
	}
	return ulu
}

// ClearCountry clears the value of the "country" field.
func (ulu *UserLoginUpdate) ClearCountry() *UserLoginUpdate {
	ulu.mutation.ClearCountry()
	return ulu
}

// SetProvince sets the "province" field.
func (ulu *UserLoginUpdate) SetProvince(s string) *UserLoginUpdate {
	ulu.mutation.SetProvince(s)
	return ulu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableProvince(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetProvince(*s)
	}
	return ulu
}

// ClearProvince clears the value of the "province" field.
func (ulu *UserLoginUpdate) ClearProvince() *UserLoginUpdate {
	ulu.mutation.ClearProvince()
	return ulu
}

// SetCity sets the "city" field.
func (ulu *UserLoginUpdate) SetCity(s string) *UserLoginUpdate {
	ulu.mutation.SetCity(s)
	return ulu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableCity(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetCity(*s)
	}
	return ulu
}

// ClearCity clears the value of the "city" field.
func (ulu *UserLoginUpdate) ClearCity() *UserLoginUpdate {
	ulu.mutation.ClearCity()
	return ulu
}

// SetIsp sets the "isp" field.
func (ulu *UserLoginUpdate) SetIsp(s string) *UserLoginUpdate {
	ulu.mutation.SetIsp(s)
	return ulu
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableIsp(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetIsp(*s)
	}
	return ulu
}

// ClearIsp clears the value of the "isp" field.
func (ulu *UserLoginUpdate) ClearIsp() *UserLoginUpdate {
	ulu.mutation.ClearIsp()
	return ulu
}

// Mutation returns the UserLoginMutation object of the builder.
func (ulu *UserLoginUpdate) Mutation() *UserLoginMutation {
	return ulu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UserLoginUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ulu.defaults()
	if len(ulu.hooks) == 0 {
		affected, err = ulu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ulu.mutation = mutation
			affected, err = ulu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ulu.hooks) - 1; i >= 0; i-- {
			if ulu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ulu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UserLoginUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UserLoginUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UserLoginUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulu *UserLoginUpdate) defaults() {
	if _, ok := ulu.mutation.UpdatedAt(); !ok {
		v := userlogin.UpdateDefaultUpdatedAt()
		ulu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ulu *UserLoginUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserLoginUpdate {
	ulu.modifiers = append(ulu.modifiers, modifiers...)
	return ulu
}

func (ulu *UserLoginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlogin.Table,
			Columns: userlogin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlogin.FieldID,
			},
		},
	}
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.UpdatedAt(); ok {
		_spec.SetField(userlogin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ulu.mutation.UserAgent(); ok {
		_spec.SetField(userlogin.FieldUserAgent, field.TypeString, value)
	}
	if ulu.mutation.UserAgentCleared() {
		_spec.ClearField(userlogin.FieldUserAgent, field.TypeString)
	}
	if value, ok := ulu.mutation.IP(); ok {
		_spec.SetField(userlogin.FieldIP, field.TypeString, value)
	}
	if ulu.mutation.IPCleared() {
		_spec.ClearField(userlogin.FieldIP, field.TypeString)
	}
	if value, ok := ulu.mutation.TrackID(); ok {
		_spec.SetField(userlogin.FieldTrackID, field.TypeString, value)
	}
	if ulu.mutation.TrackIDCleared() {
		_spec.ClearField(userlogin.FieldTrackID, field.TypeString)
	}
	if value, ok := ulu.mutation.SessionID(); ok {
		_spec.SetField(userlogin.FieldSessionID, field.TypeString, value)
	}
	if ulu.mutation.SessionIDCleared() {
		_spec.ClearField(userlogin.FieldSessionID, field.TypeString)
	}
	if value, ok := ulu.mutation.XForwardedFor(); ok {
		_spec.SetField(userlogin.FieldXForwardedFor, field.TypeString, value)
	}
	if ulu.mutation.XForwardedForCleared() {
		_spec.ClearField(userlogin.FieldXForwardedFor, field.TypeString)
	}
	if value, ok := ulu.mutation.Country(); ok {
		_spec.SetField(userlogin.FieldCountry, field.TypeString, value)
	}
	if ulu.mutation.CountryCleared() {
		_spec.ClearField(userlogin.FieldCountry, field.TypeString)
	}
	if value, ok := ulu.mutation.Province(); ok {
		_spec.SetField(userlogin.FieldProvince, field.TypeString, value)
	}
	if ulu.mutation.ProvinceCleared() {
		_spec.ClearField(userlogin.FieldProvince, field.TypeString)
	}
	if value, ok := ulu.mutation.City(); ok {
		_spec.SetField(userlogin.FieldCity, field.TypeString, value)
	}
	if ulu.mutation.CityCleared() {
		_spec.ClearField(userlogin.FieldCity, field.TypeString)
	}
	if value, ok := ulu.mutation.Isp(); ok {
		_spec.SetField(userlogin.FieldIsp, field.TypeString, value)
	}
	if ulu.mutation.IspCleared() {
		_spec.ClearField(userlogin.FieldIsp, field.TypeString)
	}
	_spec.AddModifiers(ulu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserLoginUpdateOne is the builder for updating a single UserLogin entity.
type UserLoginUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserLoginMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserAgent sets the "user_agent" field.
func (uluo *UserLoginUpdateOne) SetUserAgent(s string) *UserLoginUpdateOne {
	uluo.mutation.SetUserAgent(s)
	return uluo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableUserAgent(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetUserAgent(*s)
	}
	return uluo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (uluo *UserLoginUpdateOne) ClearUserAgent() *UserLoginUpdateOne {
	uluo.mutation.ClearUserAgent()
	return uluo
}

// SetIP sets the "ip" field.
func (uluo *UserLoginUpdateOne) SetIP(s string) *UserLoginUpdateOne {
	uluo.mutation.SetIP(s)
	return uluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableIP(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetIP(*s)
	}
	return uluo
}

// ClearIP clears the value of the "ip" field.
func (uluo *UserLoginUpdateOne) ClearIP() *UserLoginUpdateOne {
	uluo.mutation.ClearIP()
	return uluo
}

// SetTrackID sets the "track_id" field.
func (uluo *UserLoginUpdateOne) SetTrackID(s string) *UserLoginUpdateOne {
	uluo.mutation.SetTrackID(s)
	return uluo
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableTrackID(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetTrackID(*s)
	}
	return uluo
}

// ClearTrackID clears the value of the "track_id" field.
func (uluo *UserLoginUpdateOne) ClearTrackID() *UserLoginUpdateOne {
	uluo.mutation.ClearTrackID()
	return uluo
}

// SetSessionID sets the "session_id" field.
func (uluo *UserLoginUpdateOne) SetSessionID(s string) *UserLoginUpdateOne {
	uluo.mutation.SetSessionID(s)
	return uluo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableSessionID(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetSessionID(*s)
	}
	return uluo
}

// ClearSessionID clears the value of the "session_id" field.
func (uluo *UserLoginUpdateOne) ClearSessionID() *UserLoginUpdateOne {
	uluo.mutation.ClearSessionID()
	return uluo
}

// SetXForwardedFor sets the "x_forwarded_for" field.
func (uluo *UserLoginUpdateOne) SetXForwardedFor(s string) *UserLoginUpdateOne {
	uluo.mutation.SetXForwardedFor(s)
	return uluo
}

// SetNillableXForwardedFor sets the "x_forwarded_for" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableXForwardedFor(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetXForwardedFor(*s)
	}
	return uluo
}

// ClearXForwardedFor clears the value of the "x_forwarded_for" field.
func (uluo *UserLoginUpdateOne) ClearXForwardedFor() *UserLoginUpdateOne {
	uluo.mutation.ClearXForwardedFor()
	return uluo
}

// SetCountry sets the "country" field.
func (uluo *UserLoginUpdateOne) SetCountry(s string) *UserLoginUpdateOne {
	uluo.mutation.SetCountry(s)
	return uluo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableCountry(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetCountry(*s)
	}
	return uluo
}

// ClearCountry clears the value of the "country" field.
func (uluo *UserLoginUpdateOne) ClearCountry() *UserLoginUpdateOne {
	uluo.mutation.ClearCountry()
	return uluo
}

// SetProvince sets the "province" field.
func (uluo *UserLoginUpdateOne) SetProvince(s string) *UserLoginUpdateOne {
	uluo.mutation.SetProvince(s)
	return uluo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableProvince(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetProvince(*s)
	}
	return uluo
}

// ClearProvince clears the value of the "province" field.
func (uluo *UserLoginUpdateOne) ClearProvince() *UserLoginUpdateOne {
	uluo.mutation.ClearProvince()
	return uluo
}

// SetCity sets the "city" field.
func (uluo *UserLoginUpdateOne) SetCity(s string) *UserLoginUpdateOne {
	uluo.mutation.SetCity(s)
	return uluo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableCity(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetCity(*s)
	}
	return uluo
}

// ClearCity clears the value of the "city" field.
func (uluo *UserLoginUpdateOne) ClearCity() *UserLoginUpdateOne {
	uluo.mutation.ClearCity()
	return uluo
}

// SetIsp sets the "isp" field.
func (uluo *UserLoginUpdateOne) SetIsp(s string) *UserLoginUpdateOne {
	uluo.mutation.SetIsp(s)
	return uluo
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableIsp(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetIsp(*s)
	}
	return uluo
}

// ClearIsp clears the value of the "isp" field.
func (uluo *UserLoginUpdateOne) ClearIsp() *UserLoginUpdateOne {
	uluo.mutation.ClearIsp()
	return uluo
}

// Mutation returns the UserLoginMutation object of the builder.
func (uluo *UserLoginUpdateOne) Mutation() *UserLoginMutation {
	return uluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uluo *UserLoginUpdateOne) Select(field string, fields ...string) *UserLoginUpdateOne {
	uluo.fields = append([]string{field}, fields...)
	return uluo
}

// Save executes the query and returns the updated UserLogin entity.
func (uluo *UserLoginUpdateOne) Save(ctx context.Context) (*UserLogin, error) {
	var (
		err  error
		node *UserLogin
	)
	uluo.defaults()
	if len(uluo.hooks) == 0 {
		node, err = uluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uluo.mutation = mutation
			node, err = uluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uluo.hooks) - 1; i >= 0; i-- {
			if uluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserLogin)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserLoginMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UserLoginUpdateOne) SaveX(ctx context.Context) *UserLogin {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UserLoginUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UserLoginUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uluo *UserLoginUpdateOne) defaults() {
	if _, ok := uluo.mutation.UpdatedAt(); !ok {
		v := userlogin.UpdateDefaultUpdatedAt()
		uluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uluo *UserLoginUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserLoginUpdateOne {
	uluo.modifiers = append(uluo.modifiers, modifiers...)
	return uluo
}

func (uluo *UserLoginUpdateOne) sqlSave(ctx context.Context) (_node *UserLogin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlogin.Table,
			Columns: userlogin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlogin.FieldID,
			},
		},
	}
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserLogin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlogin.FieldID)
		for _, f := range fields {
			if !userlogin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userlogin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uluo.mutation.UpdatedAt(); ok {
		_spec.SetField(userlogin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uluo.mutation.UserAgent(); ok {
		_spec.SetField(userlogin.FieldUserAgent, field.TypeString, value)
	}
	if uluo.mutation.UserAgentCleared() {
		_spec.ClearField(userlogin.FieldUserAgent, field.TypeString)
	}
	if value, ok := uluo.mutation.IP(); ok {
		_spec.SetField(userlogin.FieldIP, field.TypeString, value)
	}
	if uluo.mutation.IPCleared() {
		_spec.ClearField(userlogin.FieldIP, field.TypeString)
	}
	if value, ok := uluo.mutation.TrackID(); ok {
		_spec.SetField(userlogin.FieldTrackID, field.TypeString, value)
	}
	if uluo.mutation.TrackIDCleared() {
		_spec.ClearField(userlogin.FieldTrackID, field.TypeString)
	}
	if value, ok := uluo.mutation.SessionID(); ok {
		_spec.SetField(userlogin.FieldSessionID, field.TypeString, value)
	}
	if uluo.mutation.SessionIDCleared() {
		_spec.ClearField(userlogin.FieldSessionID, field.TypeString)
	}
	if value, ok := uluo.mutation.XForwardedFor(); ok {
		_spec.SetField(userlogin.FieldXForwardedFor, field.TypeString, value)
	}
	if uluo.mutation.XForwardedForCleared() {
		_spec.ClearField(userlogin.FieldXForwardedFor, field.TypeString)
	}
	if value, ok := uluo.mutation.Country(); ok {
		_spec.SetField(userlogin.FieldCountry, field.TypeString, value)
	}
	if uluo.mutation.CountryCleared() {
		_spec.ClearField(userlogin.FieldCountry, field.TypeString)
	}
	if value, ok := uluo.mutation.Province(); ok {
		_spec.SetField(userlogin.FieldProvince, field.TypeString, value)
	}
	if uluo.mutation.ProvinceCleared() {
		_spec.ClearField(userlogin.FieldProvince, field.TypeString)
	}
	if value, ok := uluo.mutation.City(); ok {
		_spec.SetField(userlogin.FieldCity, field.TypeString, value)
	}
	if uluo.mutation.CityCleared() {
		_spec.ClearField(userlogin.FieldCity, field.TypeString)
	}
	if value, ok := uluo.mutation.Isp(); ok {
		_spec.SetField(userlogin.FieldIsp, field.TypeString, value)
	}
	if uluo.mutation.IspCleared() {
		_spec.ClearField(userlogin.FieldIsp, field.TypeString)
	}
	_spec.AddModifiers(uluo.modifiers...)
	_node = &UserLogin{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
