// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/userlogin"
)

// UserLogin is the model entity for the UserLogin schema.
type UserLogin struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间，添加记录时由程序自动生成
	CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 更新时间，更新记录时由程序自动生成
	UpdatedAt time.Time `json:"updatedAt,omitempty" sql:"updated_at"`
	// Account holds the value of the "account" field.
	// 登录账户
	Account string `json:"account,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	// 用户浏览器的user-agent
	UserAgent string `json:"userAgent,omitempty"`
	// IP holds the value of the "ip" field.
	// 用户IP
	IP string `json:"ip,omitempty"`
	// TrackID holds the value of the "track_id" field.
	// 用户的track id
	TrackID string `json:"trackID,omitempty"`
	// SessionID holds the value of the "session_id" field.
	// 用户的session id
	SessionID string `json:"sessionID,omitempty"`
	// XForwardedFor holds the value of the "x_forwarded_for" field.
	// 用户登录时的x-forwarded-for
	XForwardedFor string `json:"xForwardedFor,omitempty"`
	// Country holds the value of the "country" field.
	// 用户登录IP定位的国家
	Country string `json:"country,omitempty"`
	// Province holds the value of the "province" field.
	// 用户登录IP定位的省份
	Province string `json:"province,omitempty"`
	// City holds the value of the "city" field.
	// 用户登录IP定位的城市
	City string `json:"city,omitempty"`
	// Isp holds the value of the "isp" field.
	// 用户登录IP的网络服务商
	Isp string `json:"isp,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLogin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userlogin.FieldID:
			values[i] = &sql.NullInt64{}
		case userlogin.FieldAccount, userlogin.FieldUserAgent, userlogin.FieldIP, userlogin.FieldTrackID, userlogin.FieldSessionID, userlogin.FieldXForwardedFor, userlogin.FieldCountry, userlogin.FieldProvince, userlogin.FieldCity, userlogin.FieldIsp:
			values[i] = &sql.NullString{}
		case userlogin.FieldCreatedAt, userlogin.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserLogin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLogin fields.
func (ul *UserLogin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userlogin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ul.ID = int(value.Int64)
		case userlogin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ul.CreatedAt = value.Time
			}
		case userlogin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ul.UpdatedAt = value.Time
			}
		case userlogin.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				ul.Account = value.String
			}
		case userlogin.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				ul.UserAgent = value.String
			}
		case userlogin.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ul.IP = value.String
			}
		case userlogin.FieldTrackID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field track_id", values[i])
			} else if value.Valid {
				ul.TrackID = value.String
			}
		case userlogin.FieldSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				ul.SessionID = value.String
			}
		case userlogin.FieldXForwardedFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field x_forwarded_for", values[i])
			} else if value.Valid {
				ul.XForwardedFor = value.String
			}
		case userlogin.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				ul.Country = value.String
			}
		case userlogin.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				ul.Province = value.String
			}
		case userlogin.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ul.City = value.String
			}
		case userlogin.FieldIsp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isp", values[i])
			} else if value.Valid {
				ul.Isp = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserLogin.
// Note that you need to call UserLogin.Unwrap() before calling this method if this UserLogin
// was returned from a transaction, and the transaction was committed or rolled back.
func (ul *UserLogin) Update() *UserLoginUpdateOne {
	return (&UserLoginClient{config: ul.config}).UpdateOne(ul)
}

// Unwrap unwraps the UserLogin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ul *UserLogin) Unwrap() *UserLogin {
	tx, ok := ul.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLogin is not a transactional entity")
	}
	ul.config.driver = tx.drv
	return ul
}

// String implements the fmt.Stringer.
func (ul *UserLogin) String() string {
	var builder strings.Builder
	builder.WriteString("UserLogin(")
	builder.WriteString(fmt.Sprintf("id=%v", ul.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ul.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ul.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", account=")
	builder.WriteString(ul.Account)
	builder.WriteString(", user_agent=")
	builder.WriteString(ul.UserAgent)
	builder.WriteString(", ip=")
	builder.WriteString(ul.IP)
	builder.WriteString(", track_id=")
	builder.WriteString(ul.TrackID)
	builder.WriteString(", session_id=")
	builder.WriteString(ul.SessionID)
	builder.WriteString(", x_forwarded_for=")
	builder.WriteString(ul.XForwardedFor)
	builder.WriteString(", country=")
	builder.WriteString(ul.Country)
	builder.WriteString(", province=")
	builder.WriteString(ul.Province)
	builder.WriteString(", city=")
	builder.WriteString(ul.City)
	builder.WriteString(", isp=")
	builder.WriteString(ul.Isp)
	builder.WriteByte(')')
	return builder.String()
}

// UserLogins is a parsable slice of UserLogin.
type UserLogins []*UserLogin

func (ul UserLogins) config(cfg config) {
	for _i := range ul {
		ul[_i].config = cfg
	}
}
