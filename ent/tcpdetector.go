// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/schema"
	"github.com/vicanso/cybertect/ent/tcpdetector"
)

// TCPDetector is the model entity for the TCPDetector schema.
type TCPDetector struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间，添加记录时由程序自动生成
	CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 更新时间，更新记录时由程序自动生成
	UpdatedAt time.Time `json:"updatedAt,omitempty" sql:"updated_at"`
	// Status holds the value of the "status" field.
	// 状态，默认为启用状态
	Status schema.Status `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	// 配置名称
	Name string `json:"name,omitempty"`
	// Owner holds the value of the "owner" field.
	// 配置拥有者
	Owner string `json:"owner,omitempty"`
	// Description holds the value of the "description" field.
	// 配置描述
	Description string `json:"description,omitempty"`
	// Receivers holds the value of the "receivers" field.
	// 接收者列表
	Receivers []string `json:"receivers,omitempty"`
	// Timeout holds the value of the "timeout" field.
	// 超时设置
	Timeout string `json:"timeout,omitempty"`
	// Addrs holds the value of the "addrs" field.
	// 检测地址列表
	Addrs []string `json:"addrs,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TCPDetector) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tcpdetector.FieldReceivers, tcpdetector.FieldAddrs:
			values[i] = &[]byte{}
		case tcpdetector.FieldID, tcpdetector.FieldStatus:
			values[i] = &sql.NullInt64{}
		case tcpdetector.FieldName, tcpdetector.FieldOwner, tcpdetector.FieldDescription, tcpdetector.FieldTimeout:
			values[i] = &sql.NullString{}
		case tcpdetector.FieldCreatedAt, tcpdetector.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TCPDetector", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TCPDetector fields.
func (td *TCPDetector) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tcpdetector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case tcpdetector.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		case tcpdetector.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				td.UpdatedAt = value.Time
			}
		case tcpdetector.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				td.Status = schema.Status(value.Int64)
			}
		case tcpdetector.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				td.Name = value.String
			}
		case tcpdetector.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				td.Owner = value.String
			}
		case tcpdetector.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				td.Description = value.String
			}
		case tcpdetector.FieldReceivers:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field receivers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Receivers); err != nil {
					return fmt.Errorf("unmarshal field receivers: %w", err)
				}
			}
		case tcpdetector.FieldTimeout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				td.Timeout = value.String
			}
		case tcpdetector.FieldAddrs:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field addrs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Addrs); err != nil {
					return fmt.Errorf("unmarshal field addrs: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TCPDetector.
// Note that you need to call TCPDetector.Unwrap() before calling this method if this TCPDetector
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TCPDetector) Update() *TCPDetectorUpdateOne {
	return (&TCPDetectorClient{config: td.config}).UpdateOne(td)
}

// Unwrap unwraps the TCPDetector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TCPDetector) Unwrap() *TCPDetector {
	tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TCPDetector is not a transactional entity")
	}
	td.config.driver = tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TCPDetector) String() string {
	var builder strings.Builder
	builder.WriteString("TCPDetector(")
	builder.WriteString(fmt.Sprintf("id=%v", td.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(td.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", td.Status))
	builder.WriteString(", name=")
	builder.WriteString(td.Name)
	builder.WriteString(", owner=")
	builder.WriteString(td.Owner)
	builder.WriteString(", description=")
	builder.WriteString(td.Description)
	builder.WriteString(", receivers=")
	builder.WriteString(fmt.Sprintf("%v", td.Receivers))
	builder.WriteString(", timeout=")
	builder.WriteString(td.Timeout)
	builder.WriteString(", addrs=")
	builder.WriteString(fmt.Sprintf("%v", td.Addrs))
	builder.WriteByte(')')
	return builder.String()
}

// TCPDetectors is a parsable slice of TCPDetector.
type TCPDetectors []*TCPDetector

func (td TCPDetectors) config(cfg config) {
	for _i := range td {
		td[_i].config = cfg
	}
}
