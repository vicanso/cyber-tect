// Code generated by ent, DO NOT EDIT.

package httpdetector

import (
	"time"

	"github.com/vicanso/cybertect/schema"
)

const (
	// Label holds the string label denoting the httpdetector type in the database.
	Label = "http_detector"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOwners holds the string denoting the owners field in the database.
	FieldOwners = "owners"
	// FieldReceivers holds the string denoting the receivers field in the database.
	FieldReceivers = "receivers"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIps holds the string denoting the ips field in the database.
	FieldIps = "ips"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldScript holds the string denoting the script field in the database.
	FieldScript = "script"
	// FieldProxies holds the string denoting the proxies field in the database.
	FieldProxies = "proxies"
	// FieldRandomQueryString holds the string denoting the randomquerystring field in the database.
	FieldRandomQueryString = "random_query_string"
	// Table holds the table name of the httpdetector in the database.
	Table = "http_detectors"
)

// Columns holds all SQL columns for httpdetector fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldName,
	FieldOwners,
	FieldReceivers,
	FieldTimeout,
	FieldInterval,
	FieldDescription,
	FieldIps,
	FieldURL,
	FieldScript,
	FieldProxies,
	FieldRandomQueryString,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus schema.Status
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int8) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TimeoutValidator is a validator for the "timeout" field. It is called by the builders before save.
	TimeoutValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
)
