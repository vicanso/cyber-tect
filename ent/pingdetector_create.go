// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/pingdetector"
	"github.com/vicanso/cybertect/schema"
)

// PingDetectorCreate is the builder for creating a PingDetector entity.
type PingDetectorCreate struct {
	config
	mutation *PingDetectorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pdc *PingDetectorCreate) SetCreatedAt(t time.Time) *PingDetectorCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *PingDetectorCreate) SetNillableCreatedAt(t *time.Time) *PingDetectorCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *PingDetectorCreate) SetUpdatedAt(t time.Time) *PingDetectorCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *PingDetectorCreate) SetNillableUpdatedAt(t *time.Time) *PingDetectorCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// SetStatus sets the "status" field.
func (pdc *PingDetectorCreate) SetStatus(s schema.Status) *PingDetectorCreate {
	pdc.mutation.SetStatus(s)
	return pdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pdc *PingDetectorCreate) SetNillableStatus(s *schema.Status) *PingDetectorCreate {
	if s != nil {
		pdc.SetStatus(*s)
	}
	return pdc
}

// SetName sets the "name" field.
func (pdc *PingDetectorCreate) SetName(s string) *PingDetectorCreate {
	pdc.mutation.SetName(s)
	return pdc
}

// SetOwners sets the "owners" field.
func (pdc *PingDetectorCreate) SetOwners(s []string) *PingDetectorCreate {
	pdc.mutation.SetOwners(s)
	return pdc
}

// SetReceivers sets the "receivers" field.
func (pdc *PingDetectorCreate) SetReceivers(s []string) *PingDetectorCreate {
	pdc.mutation.SetReceivers(s)
	return pdc
}

// SetTimeout sets the "timeout" field.
func (pdc *PingDetectorCreate) SetTimeout(s string) *PingDetectorCreate {
	pdc.mutation.SetTimeout(s)
	return pdc
}

// SetInterval sets the "interval" field.
func (pdc *PingDetectorCreate) SetInterval(s string) *PingDetectorCreate {
	pdc.mutation.SetInterval(s)
	return pdc
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (pdc *PingDetectorCreate) SetNillableInterval(s *string) *PingDetectorCreate {
	if s != nil {
		pdc.SetInterval(*s)
	}
	return pdc
}

// SetDescription sets the "description" field.
func (pdc *PingDetectorCreate) SetDescription(s string) *PingDetectorCreate {
	pdc.mutation.SetDescription(s)
	return pdc
}

// SetIps sets the "ips" field.
func (pdc *PingDetectorCreate) SetIps(s []string) *PingDetectorCreate {
	pdc.mutation.SetIps(s)
	return pdc
}

// Mutation returns the PingDetectorMutation object of the builder.
func (pdc *PingDetectorCreate) Mutation() *PingDetectorMutation {
	return pdc.mutation
}

// Save creates the PingDetector in the database.
func (pdc *PingDetectorCreate) Save(ctx context.Context) (*PingDetector, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *PingDetectorCreate) SaveX(ctx context.Context) *PingDetector {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *PingDetectorCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *PingDetectorCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *PingDetectorCreate) defaults() {
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := pingdetector.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := pingdetector.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pdc.mutation.Status(); !ok {
		v := pingdetector.DefaultStatus
		pdc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *PingDetectorCreate) check() error {
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PingDetector.created_at"`)}
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PingDetector.updated_at"`)}
	}
	if _, ok := pdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PingDetector.status"`)}
	}
	if v, ok := pdc.mutation.Status(); ok {
		if err := pingdetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PingDetector.status": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PingDetector.name"`)}
	}
	if v, ok := pdc.mutation.Name(); ok {
		if err := pingdetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PingDetector.name": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Owners(); !ok {
		return &ValidationError{Name: "owners", err: errors.New(`ent: missing required field "PingDetector.owners"`)}
	}
	if _, ok := pdc.mutation.Receivers(); !ok {
		return &ValidationError{Name: "receivers", err: errors.New(`ent: missing required field "PingDetector.receivers"`)}
	}
	if _, ok := pdc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "PingDetector.timeout"`)}
	}
	if v, ok := pdc.mutation.Timeout(); ok {
		if err := pingdetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "PingDetector.timeout": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PingDetector.description"`)}
	}
	if _, ok := pdc.mutation.Ips(); !ok {
		return &ValidationError{Name: "ips", err: errors.New(`ent: missing required field "PingDetector.ips"`)}
	}
	return nil
}

func (pdc *PingDetectorCreate) sqlSave(ctx context.Context) (*PingDetector, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *PingDetectorCreate) createSpec() (*PingDetector, *sqlgraph.CreateSpec) {
	var (
		_node = &PingDetector{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(pingdetector.Table, sqlgraph.NewFieldSpec(pingdetector.FieldID, field.TypeInt))
	)
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(pingdetector.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(pingdetector.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pdc.mutation.Status(); ok {
		_spec.SetField(pingdetector.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := pdc.mutation.Name(); ok {
		_spec.SetField(pingdetector.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pdc.mutation.Owners(); ok {
		_spec.SetField(pingdetector.FieldOwners, field.TypeJSON, value)
		_node.Owners = value
	}
	if value, ok := pdc.mutation.Receivers(); ok {
		_spec.SetField(pingdetector.FieldReceivers, field.TypeJSON, value)
		_node.Receivers = value
	}
	if value, ok := pdc.mutation.Timeout(); ok {
		_spec.SetField(pingdetector.FieldTimeout, field.TypeString, value)
		_node.Timeout = value
	}
	if value, ok := pdc.mutation.Interval(); ok {
		_spec.SetField(pingdetector.FieldInterval, field.TypeString, value)
		_node.Interval = value
	}
	if value, ok := pdc.mutation.Description(); ok {
		_spec.SetField(pingdetector.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pdc.mutation.Ips(); ok {
		_spec.SetField(pingdetector.FieldIps, field.TypeJSON, value)
		_node.Ips = value
	}
	return _node, _spec
}

// PingDetectorCreateBulk is the builder for creating many PingDetector entities in bulk.
type PingDetectorCreateBulk struct {
	config
	builders []*PingDetectorCreate
}

// Save creates the PingDetector entities in the database.
func (pdcb *PingDetectorCreateBulk) Save(ctx context.Context) ([]*PingDetector, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*PingDetector, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PingDetectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *PingDetectorCreateBulk) SaveX(ctx context.Context) []*PingDetector {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *PingDetectorCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *PingDetectorCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
