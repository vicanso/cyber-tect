// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent"
	"github.com/vicanso/cybertect/ent/configuration"
	"github.com/vicanso/cybertect/ent/databasedetector"
	"github.com/vicanso/cybertect/ent/databasedetectorresult"
	"github.com/vicanso/cybertect/ent/dnsdetector"
	"github.com/vicanso/cybertect/ent/dnsdetectorresult"
	"github.com/vicanso/cybertect/ent/httpdetector"
	"github.com/vicanso/cybertect/ent/httpdetectorresult"
	"github.com/vicanso/cybertect/ent/pingdetector"
	"github.com/vicanso/cybertect/ent/pingdetectorresult"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/ent/tcpdetector"
	"github.com/vicanso/cybertect/ent/tcpdetectorresult"
	"github.com/vicanso/cybertect/ent/user"
	"github.com/vicanso/cybertect/ent/userlogin"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The ConfigurationFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConfigurationFunc func(context.Context, *ent.ConfigurationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConfigurationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConfigurationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConfigurationQuery", q)
}

// The TraverseConfiguration type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConfiguration func(context.Context, *ent.ConfigurationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConfiguration) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConfiguration) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConfigurationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConfigurationQuery", q)
}

// The DNSDetectorFunc type is an adapter to allow the use of ordinary function as a Querier.
type DNSDetectorFunc func(context.Context, *ent.DNSDetectorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DNSDetectorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DNSDetectorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DNSDetectorQuery", q)
}

// The TraverseDNSDetector type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDNSDetector func(context.Context, *ent.DNSDetectorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDNSDetector) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDNSDetector) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DNSDetectorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DNSDetectorQuery", q)
}

// The DNSDetectorResultFunc type is an adapter to allow the use of ordinary function as a Querier.
type DNSDetectorResultFunc func(context.Context, *ent.DNSDetectorResultQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DNSDetectorResultFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DNSDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DNSDetectorResultQuery", q)
}

// The TraverseDNSDetectorResult type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDNSDetectorResult func(context.Context, *ent.DNSDetectorResultQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDNSDetectorResult) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDNSDetectorResult) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DNSDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DNSDetectorResultQuery", q)
}

// The DatabaseDetectorFunc type is an adapter to allow the use of ordinary function as a Querier.
type DatabaseDetectorFunc func(context.Context, *ent.DatabaseDetectorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DatabaseDetectorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DatabaseDetectorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DatabaseDetectorQuery", q)
}

// The TraverseDatabaseDetector type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDatabaseDetector func(context.Context, *ent.DatabaseDetectorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDatabaseDetector) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDatabaseDetector) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DatabaseDetectorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DatabaseDetectorQuery", q)
}

// The DatabaseDetectorResultFunc type is an adapter to allow the use of ordinary function as a Querier.
type DatabaseDetectorResultFunc func(context.Context, *ent.DatabaseDetectorResultQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DatabaseDetectorResultFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DatabaseDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DatabaseDetectorResultQuery", q)
}

// The TraverseDatabaseDetectorResult type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDatabaseDetectorResult func(context.Context, *ent.DatabaseDetectorResultQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDatabaseDetectorResult) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDatabaseDetectorResult) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DatabaseDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DatabaseDetectorResultQuery", q)
}

// The HTTPDetectorFunc type is an adapter to allow the use of ordinary function as a Querier.
type HTTPDetectorFunc func(context.Context, *ent.HTTPDetectorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HTTPDetectorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HTTPDetectorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HTTPDetectorQuery", q)
}

// The TraverseHTTPDetector type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHTTPDetector func(context.Context, *ent.HTTPDetectorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHTTPDetector) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHTTPDetector) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HTTPDetectorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HTTPDetectorQuery", q)
}

// The HTTPDetectorResultFunc type is an adapter to allow the use of ordinary function as a Querier.
type HTTPDetectorResultFunc func(context.Context, *ent.HTTPDetectorResultQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HTTPDetectorResultFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HTTPDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HTTPDetectorResultQuery", q)
}

// The TraverseHTTPDetectorResult type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHTTPDetectorResult func(context.Context, *ent.HTTPDetectorResultQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHTTPDetectorResult) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHTTPDetectorResult) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HTTPDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HTTPDetectorResultQuery", q)
}

// The PingDetectorFunc type is an adapter to allow the use of ordinary function as a Querier.
type PingDetectorFunc func(context.Context, *ent.PingDetectorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PingDetectorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PingDetectorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PingDetectorQuery", q)
}

// The TraversePingDetector type is an adapter to allow the use of ordinary function as Traverser.
type TraversePingDetector func(context.Context, *ent.PingDetectorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePingDetector) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePingDetector) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PingDetectorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PingDetectorQuery", q)
}

// The PingDetectorResultFunc type is an adapter to allow the use of ordinary function as a Querier.
type PingDetectorResultFunc func(context.Context, *ent.PingDetectorResultQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PingDetectorResultFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PingDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PingDetectorResultQuery", q)
}

// The TraversePingDetectorResult type is an adapter to allow the use of ordinary function as Traverser.
type TraversePingDetectorResult func(context.Context, *ent.PingDetectorResultQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePingDetectorResult) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePingDetectorResult) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PingDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PingDetectorResultQuery", q)
}

// The TCPDetectorFunc type is an adapter to allow the use of ordinary function as a Querier.
type TCPDetectorFunc func(context.Context, *ent.TCPDetectorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TCPDetectorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TCPDetectorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TCPDetectorQuery", q)
}

// The TraverseTCPDetector type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTCPDetector func(context.Context, *ent.TCPDetectorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTCPDetector) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTCPDetector) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TCPDetectorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TCPDetectorQuery", q)
}

// The TCPDetectorResultFunc type is an adapter to allow the use of ordinary function as a Querier.
type TCPDetectorResultFunc func(context.Context, *ent.TCPDetectorResultQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TCPDetectorResultFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TCPDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TCPDetectorResultQuery", q)
}

// The TraverseTCPDetectorResult type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTCPDetectorResult func(context.Context, *ent.TCPDetectorResultQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTCPDetectorResult) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTCPDetectorResult) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TCPDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TCPDetectorResultQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserLoginFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserLoginFunc func(context.Context, *ent.UserLoginQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserLoginFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserLoginQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserLoginQuery", q)
}

// The TraverseUserLogin type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserLogin func(context.Context, *ent.UserLoginQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserLogin) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserLogin) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserLoginQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserLoginQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.ConfigurationQuery:
		return &query[*ent.ConfigurationQuery, predicate.Configuration, configuration.OrderOption]{typ: ent.TypeConfiguration, tq: q}, nil
	case *ent.DNSDetectorQuery:
		return &query[*ent.DNSDetectorQuery, predicate.DNSDetector, dnsdetector.OrderOption]{typ: ent.TypeDNSDetector, tq: q}, nil
	case *ent.DNSDetectorResultQuery:
		return &query[*ent.DNSDetectorResultQuery, predicate.DNSDetectorResult, dnsdetectorresult.OrderOption]{typ: ent.TypeDNSDetectorResult, tq: q}, nil
	case *ent.DatabaseDetectorQuery:
		return &query[*ent.DatabaseDetectorQuery, predicate.DatabaseDetector, databasedetector.OrderOption]{typ: ent.TypeDatabaseDetector, tq: q}, nil
	case *ent.DatabaseDetectorResultQuery:
		return &query[*ent.DatabaseDetectorResultQuery, predicate.DatabaseDetectorResult, databasedetectorresult.OrderOption]{typ: ent.TypeDatabaseDetectorResult, tq: q}, nil
	case *ent.HTTPDetectorQuery:
		return &query[*ent.HTTPDetectorQuery, predicate.HTTPDetector, httpdetector.OrderOption]{typ: ent.TypeHTTPDetector, tq: q}, nil
	case *ent.HTTPDetectorResultQuery:
		return &query[*ent.HTTPDetectorResultQuery, predicate.HTTPDetectorResult, httpdetectorresult.OrderOption]{typ: ent.TypeHTTPDetectorResult, tq: q}, nil
	case *ent.PingDetectorQuery:
		return &query[*ent.PingDetectorQuery, predicate.PingDetector, pingdetector.OrderOption]{typ: ent.TypePingDetector, tq: q}, nil
	case *ent.PingDetectorResultQuery:
		return &query[*ent.PingDetectorResultQuery, predicate.PingDetectorResult, pingdetectorresult.OrderOption]{typ: ent.TypePingDetectorResult, tq: q}, nil
	case *ent.TCPDetectorQuery:
		return &query[*ent.TCPDetectorQuery, predicate.TCPDetector, tcpdetector.OrderOption]{typ: ent.TypeTCPDetector, tq: q}, nil
	case *ent.TCPDetectorResultQuery:
		return &query[*ent.TCPDetectorResultQuery, predicate.TCPDetectorResult, tcpdetectorresult.OrderOption]{typ: ent.TypeTCPDetectorResult, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserLoginQuery:
		return &query[*ent.UserLoginQuery, predicate.UserLogin, userlogin.OrderOption]{typ: ent.TypeUserLogin, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
