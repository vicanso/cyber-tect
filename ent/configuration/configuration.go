// Code generated by ent, DO NOT EDIT.

package configuration

import (
	"fmt"
	"time"

	"github.com/vicanso/cybertect/schema"
)

const (
	// Label holds the string label denoting the configuration type in the database.
	Label = "configuration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldEndedAt holds the string denoting the ended_at field in the database.
	FieldEndedAt = "ended_at"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// Table holds the table name of the configuration in the database.
	Table = "configurations"
)

// Columns holds all SQL columns for configuration fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldName,
	FieldCategory,
	FieldOwner,
	FieldData,
	FieldStartedAt,
	FieldEndedAt,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus schema.Status
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int8) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	OwnerValidator func(string) error
	// DataValidator is a validator for the "data" field. It is called by the builders before save.
	DataValidator func(string) error
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryMockTime              Category = "mockTime"
	CategoryBlockIP               Category = "blockIP"
	CategorySignedKey             Category = "signedKey"
	CategoryRouterConcurrency     Category = "routerConcurrency"
	CategoryRouter                Category = "router"
	CategorySessionInterceptor    Category = "sessionInterceptor"
	CategoryRequestConcurrency    Category = "requestConcurrency"
	CategoryEmail                 Category = "email"
	CategoryHttpServerInterceptor Category = "httpServerInterceptor"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryMockTime, CategoryBlockIP, CategorySignedKey, CategoryRouterConcurrency, CategoryRouter, CategorySessionInterceptor, CategoryRequestConcurrency, CategoryEmail, CategoryHttpServerInterceptor:
		return nil
	default:
		return fmt.Errorf("configuration: invalid enum value for category field: %q", c)
	}
}
