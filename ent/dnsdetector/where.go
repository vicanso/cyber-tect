// Code generated by ent, DO NOT EDIT.

package dnsdetector

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v schema.Status) predicate.DNSDetector {
	vc := int8(v)
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), vc))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// Interval applies equality check predicate on the "interval" field. It's identical to IntervalEQ.
func Interval(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schema.Status) predicate.DNSDetector {
	vc := int8(v)
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), vc))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schema.Status) predicate.DNSDetector {
	vc := int8(v)
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), vc))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schema.Status) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schema.Status) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v schema.Status) predicate.DNSDetector {
	vc := int8(v)
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), vc))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v schema.Status) predicate.DNSDetector {
	vc := int8(v)
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), vc))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v schema.Status) predicate.DNSDetector {
	vc := int8(v)
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), vc))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v schema.Status) predicate.DNSDetector {
	vc := int8(v)
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), vc))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeout), v))
	})
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimeout), v...))
	})
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimeout), v...))
	})
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeout), v))
	})
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeout), v))
	})
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeout), v))
	})
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeout), v))
	})
}

// TimeoutContains applies the Contains predicate on the "timeout" field.
func TimeoutContains(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTimeout), v))
	})
}

// TimeoutHasPrefix applies the HasPrefix predicate on the "timeout" field.
func TimeoutHasPrefix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTimeout), v))
	})
}

// TimeoutHasSuffix applies the HasSuffix predicate on the "timeout" field.
func TimeoutHasSuffix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTimeout), v))
	})
}

// TimeoutEqualFold applies the EqualFold predicate on the "timeout" field.
func TimeoutEqualFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTimeout), v))
	})
}

// TimeoutContainsFold applies the ContainsFold predicate on the "timeout" field.
func TimeoutContainsFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTimeout), v))
	})
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterval), v))
	})
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInterval), v...))
	})
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInterval), v...))
	})
}

// IntervalGT applies the GT predicate on the "interval" field.
func IntervalGT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterval), v))
	})
}

// IntervalGTE applies the GTE predicate on the "interval" field.
func IntervalGTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterval), v))
	})
}

// IntervalLT applies the LT predicate on the "interval" field.
func IntervalLT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterval), v))
	})
}

// IntervalLTE applies the LTE predicate on the "interval" field.
func IntervalLTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterval), v))
	})
}

// IntervalContains applies the Contains predicate on the "interval" field.
func IntervalContains(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInterval), v))
	})
}

// IntervalHasPrefix applies the HasPrefix predicate on the "interval" field.
func IntervalHasPrefix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInterval), v))
	})
}

// IntervalHasSuffix applies the HasSuffix predicate on the "interval" field.
func IntervalHasSuffix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInterval), v))
	})
}

// IntervalIsNil applies the IsNil predicate on the "interval" field.
func IntervalIsNil() predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInterval)))
	})
}

// IntervalNotNil applies the NotNil predicate on the "interval" field.
func IntervalNotNil() predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInterval)))
	})
}

// IntervalEqualFold applies the EqualFold predicate on the "interval" field.
func IntervalEqualFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInterval), v))
	})
}

// IntervalContainsFold applies the ContainsFold predicate on the "interval" field.
func IntervalContainsFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInterval), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHost), v))
	})
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHost), v...))
	})
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.DNSDetector {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHost), v...))
	})
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHost), v))
	})
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHost), v))
	})
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHost), v))
	})
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHost), v))
	})
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHost), v))
	})
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHost), v))
	})
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHost), v))
	})
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHost), v))
	})
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHost), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DNSDetector) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DNSDetector) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DNSDetector) predicate.DNSDetector {
	return predicate.DNSDetector(func(s *sql.Selector) {
		p(s.Not())
	})
}
