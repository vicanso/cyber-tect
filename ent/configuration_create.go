// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/configuration"
	"github.com/vicanso/cybertect/schema"
)

// ConfigurationCreate is the builder for creating a Configuration entity.
type ConfigurationCreate struct {
	config
	mutation *ConfigurationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *ConfigurationCreate) SetCreatedAt(t time.Time) *ConfigurationCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableCreatedAt(t *time.Time) *ConfigurationCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ConfigurationCreate) SetUpdatedAt(t time.Time) *ConfigurationCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableUpdatedAt(t *time.Time) *ConfigurationCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ConfigurationCreate) SetStatus(s schema.Status) *ConfigurationCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableStatus(s *schema.Status) *ConfigurationCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *ConfigurationCreate) SetName(s string) *ConfigurationCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCategory sets the "category" field.
func (cc *ConfigurationCreate) SetCategory(c configuration.Category) *ConfigurationCreate {
	cc.mutation.SetCategory(c)
	return cc
}

// SetOwner sets the "owner" field.
func (cc *ConfigurationCreate) SetOwner(s string) *ConfigurationCreate {
	cc.mutation.SetOwner(s)
	return cc
}

// SetData sets the "data" field.
func (cc *ConfigurationCreate) SetData(s string) *ConfigurationCreate {
	cc.mutation.SetData(s)
	return cc
}

// SetStartedAt sets the "started_at" field.
func (cc *ConfigurationCreate) SetStartedAt(t time.Time) *ConfigurationCreate {
	cc.mutation.SetStartedAt(t)
	return cc
}

// SetEndedAt sets the "ended_at" field.
func (cc *ConfigurationCreate) SetEndedAt(t time.Time) *ConfigurationCreate {
	cc.mutation.SetEndedAt(t)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ConfigurationCreate) SetDescription(s string) *ConfigurationCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableDescription(s *string) *ConfigurationCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// Mutation returns the ConfigurationMutation object of the builder.
func (cc *ConfigurationCreate) Mutation() *ConfigurationMutation {
	return cc.mutation
}

// Save creates the Configuration in the database.
func (cc *ConfigurationCreate) Save(ctx context.Context) (*Configuration, error) {
	cc.defaults()
	return withHooks[*Configuration, ConfigurationMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfigurationCreate) SaveX(ctx context.Context) *Configuration {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConfigurationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConfigurationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConfigurationCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := configuration.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := configuration.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := configuration.DefaultStatus
		cc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConfigurationCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Configuration.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Configuration.updated_at"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Configuration.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := configuration.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Configuration.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Configuration.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := configuration.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Configuration.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Configuration.category"`)}
	}
	if v, ok := cc.mutation.Category(); ok {
		if err := configuration.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Configuration.category": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Configuration.owner"`)}
	}
	if v, ok := cc.mutation.Owner(); ok {
		if err := configuration.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Configuration.owner": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "Configuration.data"`)}
	}
	if v, ok := cc.mutation.Data(); ok {
		if err := configuration.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`ent: validator failed for field "Configuration.data": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "Configuration.started_at"`)}
	}
	if _, ok := cc.mutation.EndedAt(); !ok {
		return &ValidationError{Name: "ended_at", err: errors.New(`ent: missing required field "Configuration.ended_at"`)}
	}
	return nil
}

func (cc *ConfigurationCreate) sqlSave(ctx context.Context) (*Configuration, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConfigurationCreate) createSpec() (*Configuration, *sqlgraph.CreateSpec) {
	var (
		_node = &Configuration{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(configuration.Table, sqlgraph.NewFieldSpec(configuration.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(configuration.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(configuration.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(configuration.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(configuration.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Category(); ok {
		_spec.SetField(configuration.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := cc.mutation.Owner(); ok {
		_spec.SetField(configuration.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := cc.mutation.Data(); ok {
		_spec.SetField(configuration.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := cc.mutation.StartedAt(); ok {
		_spec.SetField(configuration.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := cc.mutation.EndedAt(); ok {
		_spec.SetField(configuration.FieldEndedAt, field.TypeTime, value)
		_node.EndedAt = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(configuration.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// ConfigurationCreateBulk is the builder for creating many Configuration entities in bulk.
type ConfigurationCreateBulk struct {
	config
	builders []*ConfigurationCreate
}

// Save creates the Configuration entities in the database.
func (ccb *ConfigurationCreateBulk) Save(ctx context.Context) ([]*Configuration, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Configuration, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConfigurationCreateBulk) SaveX(ctx context.Context) []*Configuration {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConfigurationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConfigurationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
