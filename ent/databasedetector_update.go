// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/databasedetector"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/schema"
)

// DatabaseDetectorUpdate is the builder for updating DatabaseDetector entities.
type DatabaseDetectorUpdate struct {
	config
	hooks     []Hook
	mutation  *DatabaseDetectorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DatabaseDetectorUpdate builder.
func (ddu *DatabaseDetectorUpdate) Where(ps ...predicate.DatabaseDetector) *DatabaseDetectorUpdate {
	ddu.mutation.Where(ps...)
	return ddu
}

// SetStatus sets the "status" field.
func (ddu *DatabaseDetectorUpdate) SetStatus(s schema.Status) *DatabaseDetectorUpdate {
	ddu.mutation.ResetStatus()
	ddu.mutation.SetStatus(s)
	return ddu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ddu *DatabaseDetectorUpdate) SetNillableStatus(s *schema.Status) *DatabaseDetectorUpdate {
	if s != nil {
		ddu.SetStatus(*s)
	}
	return ddu
}

// AddStatus adds s to the "status" field.
func (ddu *DatabaseDetectorUpdate) AddStatus(s schema.Status) *DatabaseDetectorUpdate {
	ddu.mutation.AddStatus(s)
	return ddu
}

// SetName sets the "name" field.
func (ddu *DatabaseDetectorUpdate) SetName(s string) *DatabaseDetectorUpdate {
	ddu.mutation.SetName(s)
	return ddu
}

// SetOwners sets the "owners" field.
func (ddu *DatabaseDetectorUpdate) SetOwners(s []string) *DatabaseDetectorUpdate {
	ddu.mutation.SetOwners(s)
	return ddu
}

// AppendOwners appends s to the "owners" field.
func (ddu *DatabaseDetectorUpdate) AppendOwners(s []string) *DatabaseDetectorUpdate {
	ddu.mutation.AppendOwners(s)
	return ddu
}

// SetReceivers sets the "receivers" field.
func (ddu *DatabaseDetectorUpdate) SetReceivers(s []string) *DatabaseDetectorUpdate {
	ddu.mutation.SetReceivers(s)
	return ddu
}

// AppendReceivers appends s to the "receivers" field.
func (ddu *DatabaseDetectorUpdate) AppendReceivers(s []string) *DatabaseDetectorUpdate {
	ddu.mutation.AppendReceivers(s)
	return ddu
}

// SetTimeout sets the "timeout" field.
func (ddu *DatabaseDetectorUpdate) SetTimeout(s string) *DatabaseDetectorUpdate {
	ddu.mutation.SetTimeout(s)
	return ddu
}

// SetInterval sets the "interval" field.
func (ddu *DatabaseDetectorUpdate) SetInterval(s string) *DatabaseDetectorUpdate {
	ddu.mutation.SetInterval(s)
	return ddu
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (ddu *DatabaseDetectorUpdate) SetNillableInterval(s *string) *DatabaseDetectorUpdate {
	if s != nil {
		ddu.SetInterval(*s)
	}
	return ddu
}

// ClearInterval clears the value of the "interval" field.
func (ddu *DatabaseDetectorUpdate) ClearInterval() *DatabaseDetectorUpdate {
	ddu.mutation.ClearInterval()
	return ddu
}

// SetDescription sets the "description" field.
func (ddu *DatabaseDetectorUpdate) SetDescription(s string) *DatabaseDetectorUpdate {
	ddu.mutation.SetDescription(s)
	return ddu
}

// SetUris sets the "uris" field.
func (ddu *DatabaseDetectorUpdate) SetUris(s []string) *DatabaseDetectorUpdate {
	ddu.mutation.SetUris(s)
	return ddu
}

// AppendUris appends s to the "uris" field.
func (ddu *DatabaseDetectorUpdate) AppendUris(s []string) *DatabaseDetectorUpdate {
	ddu.mutation.AppendUris(s)
	return ddu
}

// SetCertPem sets the "certPem" field.
func (ddu *DatabaseDetectorUpdate) SetCertPem(s string) *DatabaseDetectorUpdate {
	ddu.mutation.SetCertPem(s)
	return ddu
}

// SetNillableCertPem sets the "certPem" field if the given value is not nil.
func (ddu *DatabaseDetectorUpdate) SetNillableCertPem(s *string) *DatabaseDetectorUpdate {
	if s != nil {
		ddu.SetCertPem(*s)
	}
	return ddu
}

// ClearCertPem clears the value of the "certPem" field.
func (ddu *DatabaseDetectorUpdate) ClearCertPem() *DatabaseDetectorUpdate {
	ddu.mutation.ClearCertPem()
	return ddu
}

// SetKeyPem sets the "keyPem" field.
func (ddu *DatabaseDetectorUpdate) SetKeyPem(s string) *DatabaseDetectorUpdate {
	ddu.mutation.SetKeyPem(s)
	return ddu
}

// SetNillableKeyPem sets the "keyPem" field if the given value is not nil.
func (ddu *DatabaseDetectorUpdate) SetNillableKeyPem(s *string) *DatabaseDetectorUpdate {
	if s != nil {
		ddu.SetKeyPem(*s)
	}
	return ddu
}

// ClearKeyPem clears the value of the "keyPem" field.
func (ddu *DatabaseDetectorUpdate) ClearKeyPem() *DatabaseDetectorUpdate {
	ddu.mutation.ClearKeyPem()
	return ddu
}

// Mutation returns the DatabaseDetectorMutation object of the builder.
func (ddu *DatabaseDetectorUpdate) Mutation() *DatabaseDetectorMutation {
	return ddu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ddu *DatabaseDetectorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ddu.defaults()
	if len(ddu.hooks) == 0 {
		if err = ddu.check(); err != nil {
			return 0, err
		}
		affected, err = ddu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatabaseDetectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ddu.check(); err != nil {
				return 0, err
			}
			ddu.mutation = mutation
			affected, err = ddu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ddu.hooks) - 1; i >= 0; i-- {
			if ddu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ddu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ddu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ddu *DatabaseDetectorUpdate) SaveX(ctx context.Context) int {
	affected, err := ddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ddu *DatabaseDetectorUpdate) Exec(ctx context.Context) error {
	_, err := ddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddu *DatabaseDetectorUpdate) ExecX(ctx context.Context) {
	if err := ddu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ddu *DatabaseDetectorUpdate) defaults() {
	if _, ok := ddu.mutation.UpdatedAt(); !ok {
		v := databasedetector.UpdateDefaultUpdatedAt()
		ddu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ddu *DatabaseDetectorUpdate) check() error {
	if v, ok := ddu.mutation.Status(); ok {
		if err := databasedetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DatabaseDetector.status": %w`, err)}
		}
	}
	if v, ok := ddu.mutation.Name(); ok {
		if err := databasedetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DatabaseDetector.name": %w`, err)}
		}
	}
	if v, ok := ddu.mutation.Timeout(); ok {
		if err := databasedetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "DatabaseDetector.timeout": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ddu *DatabaseDetectorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DatabaseDetectorUpdate {
	ddu.modifiers = append(ddu.modifiers, modifiers...)
	return ddu
}

func (ddu *DatabaseDetectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   databasedetector.Table,
			Columns: databasedetector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: databasedetector.FieldID,
			},
		},
	}
	if ps := ddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ddu.mutation.UpdatedAt(); ok {
		_spec.SetField(databasedetector.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ddu.mutation.Status(); ok {
		_spec.SetField(databasedetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ddu.mutation.AddedStatus(); ok {
		_spec.AddField(databasedetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ddu.mutation.Name(); ok {
		_spec.SetField(databasedetector.FieldName, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Owners(); ok {
		_spec.SetField(databasedetector.FieldOwners, field.TypeJSON, value)
	}
	if value, ok := ddu.mutation.AppendedOwners(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, databasedetector.FieldOwners, value)
		})
	}
	if value, ok := ddu.mutation.Receivers(); ok {
		_spec.SetField(databasedetector.FieldReceivers, field.TypeJSON, value)
	}
	if value, ok := ddu.mutation.AppendedReceivers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, databasedetector.FieldReceivers, value)
		})
	}
	if value, ok := ddu.mutation.Timeout(); ok {
		_spec.SetField(databasedetector.FieldTimeout, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Interval(); ok {
		_spec.SetField(databasedetector.FieldInterval, field.TypeString, value)
	}
	if ddu.mutation.IntervalCleared() {
		_spec.ClearField(databasedetector.FieldInterval, field.TypeString)
	}
	if value, ok := ddu.mutation.Description(); ok {
		_spec.SetField(databasedetector.FieldDescription, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Uris(); ok {
		_spec.SetField(databasedetector.FieldUris, field.TypeJSON, value)
	}
	if value, ok := ddu.mutation.AppendedUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, databasedetector.FieldUris, value)
		})
	}
	if value, ok := ddu.mutation.CertPem(); ok {
		_spec.SetField(databasedetector.FieldCertPem, field.TypeString, value)
	}
	if ddu.mutation.CertPemCleared() {
		_spec.ClearField(databasedetector.FieldCertPem, field.TypeString)
	}
	if value, ok := ddu.mutation.KeyPem(); ok {
		_spec.SetField(databasedetector.FieldKeyPem, field.TypeString, value)
	}
	if ddu.mutation.KeyPemCleared() {
		_spec.ClearField(databasedetector.FieldKeyPem, field.TypeString)
	}
	_spec.AddModifiers(ddu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{databasedetector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DatabaseDetectorUpdateOne is the builder for updating a single DatabaseDetector entity.
type DatabaseDetectorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DatabaseDetectorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetStatus sets the "status" field.
func (dduo *DatabaseDetectorUpdateOne) SetStatus(s schema.Status) *DatabaseDetectorUpdateOne {
	dduo.mutation.ResetStatus()
	dduo.mutation.SetStatus(s)
	return dduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dduo *DatabaseDetectorUpdateOne) SetNillableStatus(s *schema.Status) *DatabaseDetectorUpdateOne {
	if s != nil {
		dduo.SetStatus(*s)
	}
	return dduo
}

// AddStatus adds s to the "status" field.
func (dduo *DatabaseDetectorUpdateOne) AddStatus(s schema.Status) *DatabaseDetectorUpdateOne {
	dduo.mutation.AddStatus(s)
	return dduo
}

// SetName sets the "name" field.
func (dduo *DatabaseDetectorUpdateOne) SetName(s string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetName(s)
	return dduo
}

// SetOwners sets the "owners" field.
func (dduo *DatabaseDetectorUpdateOne) SetOwners(s []string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetOwners(s)
	return dduo
}

// AppendOwners appends s to the "owners" field.
func (dduo *DatabaseDetectorUpdateOne) AppendOwners(s []string) *DatabaseDetectorUpdateOne {
	dduo.mutation.AppendOwners(s)
	return dduo
}

// SetReceivers sets the "receivers" field.
func (dduo *DatabaseDetectorUpdateOne) SetReceivers(s []string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetReceivers(s)
	return dduo
}

// AppendReceivers appends s to the "receivers" field.
func (dduo *DatabaseDetectorUpdateOne) AppendReceivers(s []string) *DatabaseDetectorUpdateOne {
	dduo.mutation.AppendReceivers(s)
	return dduo
}

// SetTimeout sets the "timeout" field.
func (dduo *DatabaseDetectorUpdateOne) SetTimeout(s string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetTimeout(s)
	return dduo
}

// SetInterval sets the "interval" field.
func (dduo *DatabaseDetectorUpdateOne) SetInterval(s string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetInterval(s)
	return dduo
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (dduo *DatabaseDetectorUpdateOne) SetNillableInterval(s *string) *DatabaseDetectorUpdateOne {
	if s != nil {
		dduo.SetInterval(*s)
	}
	return dduo
}

// ClearInterval clears the value of the "interval" field.
func (dduo *DatabaseDetectorUpdateOne) ClearInterval() *DatabaseDetectorUpdateOne {
	dduo.mutation.ClearInterval()
	return dduo
}

// SetDescription sets the "description" field.
func (dduo *DatabaseDetectorUpdateOne) SetDescription(s string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetDescription(s)
	return dduo
}

// SetUris sets the "uris" field.
func (dduo *DatabaseDetectorUpdateOne) SetUris(s []string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetUris(s)
	return dduo
}

// AppendUris appends s to the "uris" field.
func (dduo *DatabaseDetectorUpdateOne) AppendUris(s []string) *DatabaseDetectorUpdateOne {
	dduo.mutation.AppendUris(s)
	return dduo
}

// SetCertPem sets the "certPem" field.
func (dduo *DatabaseDetectorUpdateOne) SetCertPem(s string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetCertPem(s)
	return dduo
}

// SetNillableCertPem sets the "certPem" field if the given value is not nil.
func (dduo *DatabaseDetectorUpdateOne) SetNillableCertPem(s *string) *DatabaseDetectorUpdateOne {
	if s != nil {
		dduo.SetCertPem(*s)
	}
	return dduo
}

// ClearCertPem clears the value of the "certPem" field.
func (dduo *DatabaseDetectorUpdateOne) ClearCertPem() *DatabaseDetectorUpdateOne {
	dduo.mutation.ClearCertPem()
	return dduo
}

// SetKeyPem sets the "keyPem" field.
func (dduo *DatabaseDetectorUpdateOne) SetKeyPem(s string) *DatabaseDetectorUpdateOne {
	dduo.mutation.SetKeyPem(s)
	return dduo
}

// SetNillableKeyPem sets the "keyPem" field if the given value is not nil.
func (dduo *DatabaseDetectorUpdateOne) SetNillableKeyPem(s *string) *DatabaseDetectorUpdateOne {
	if s != nil {
		dduo.SetKeyPem(*s)
	}
	return dduo
}

// ClearKeyPem clears the value of the "keyPem" field.
func (dduo *DatabaseDetectorUpdateOne) ClearKeyPem() *DatabaseDetectorUpdateOne {
	dduo.mutation.ClearKeyPem()
	return dduo
}

// Mutation returns the DatabaseDetectorMutation object of the builder.
func (dduo *DatabaseDetectorUpdateOne) Mutation() *DatabaseDetectorMutation {
	return dduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dduo *DatabaseDetectorUpdateOne) Select(field string, fields ...string) *DatabaseDetectorUpdateOne {
	dduo.fields = append([]string{field}, fields...)
	return dduo
}

// Save executes the query and returns the updated DatabaseDetector entity.
func (dduo *DatabaseDetectorUpdateOne) Save(ctx context.Context) (*DatabaseDetector, error) {
	var (
		err  error
		node *DatabaseDetector
	)
	dduo.defaults()
	if len(dduo.hooks) == 0 {
		if err = dduo.check(); err != nil {
			return nil, err
		}
		node, err = dduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatabaseDetectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dduo.check(); err != nil {
				return nil, err
			}
			dduo.mutation = mutation
			node, err = dduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dduo.hooks) - 1; i >= 0; i-- {
			if dduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DatabaseDetector)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DatabaseDetectorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dduo *DatabaseDetectorUpdateOne) SaveX(ctx context.Context) *DatabaseDetector {
	node, err := dduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dduo *DatabaseDetectorUpdateOne) Exec(ctx context.Context) error {
	_, err := dduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dduo *DatabaseDetectorUpdateOne) ExecX(ctx context.Context) {
	if err := dduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dduo *DatabaseDetectorUpdateOne) defaults() {
	if _, ok := dduo.mutation.UpdatedAt(); !ok {
		v := databasedetector.UpdateDefaultUpdatedAt()
		dduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dduo *DatabaseDetectorUpdateOne) check() error {
	if v, ok := dduo.mutation.Status(); ok {
		if err := databasedetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DatabaseDetector.status": %w`, err)}
		}
	}
	if v, ok := dduo.mutation.Name(); ok {
		if err := databasedetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DatabaseDetector.name": %w`, err)}
		}
	}
	if v, ok := dduo.mutation.Timeout(); ok {
		if err := databasedetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "DatabaseDetector.timeout": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dduo *DatabaseDetectorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DatabaseDetectorUpdateOne {
	dduo.modifiers = append(dduo.modifiers, modifiers...)
	return dduo
}

func (dduo *DatabaseDetectorUpdateOne) sqlSave(ctx context.Context) (_node *DatabaseDetector, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   databasedetector.Table,
			Columns: databasedetector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: databasedetector.FieldID,
			},
		},
	}
	id, ok := dduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DatabaseDetector.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, databasedetector.FieldID)
		for _, f := range fields {
			if !databasedetector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != databasedetector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dduo.mutation.UpdatedAt(); ok {
		_spec.SetField(databasedetector.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dduo.mutation.Status(); ok {
		_spec.SetField(databasedetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := dduo.mutation.AddedStatus(); ok {
		_spec.AddField(databasedetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := dduo.mutation.Name(); ok {
		_spec.SetField(databasedetector.FieldName, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Owners(); ok {
		_spec.SetField(databasedetector.FieldOwners, field.TypeJSON, value)
	}
	if value, ok := dduo.mutation.AppendedOwners(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, databasedetector.FieldOwners, value)
		})
	}
	if value, ok := dduo.mutation.Receivers(); ok {
		_spec.SetField(databasedetector.FieldReceivers, field.TypeJSON, value)
	}
	if value, ok := dduo.mutation.AppendedReceivers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, databasedetector.FieldReceivers, value)
		})
	}
	if value, ok := dduo.mutation.Timeout(); ok {
		_spec.SetField(databasedetector.FieldTimeout, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Interval(); ok {
		_spec.SetField(databasedetector.FieldInterval, field.TypeString, value)
	}
	if dduo.mutation.IntervalCleared() {
		_spec.ClearField(databasedetector.FieldInterval, field.TypeString)
	}
	if value, ok := dduo.mutation.Description(); ok {
		_spec.SetField(databasedetector.FieldDescription, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Uris(); ok {
		_spec.SetField(databasedetector.FieldUris, field.TypeJSON, value)
	}
	if value, ok := dduo.mutation.AppendedUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, databasedetector.FieldUris, value)
		})
	}
	if value, ok := dduo.mutation.CertPem(); ok {
		_spec.SetField(databasedetector.FieldCertPem, field.TypeString, value)
	}
	if dduo.mutation.CertPemCleared() {
		_spec.ClearField(databasedetector.FieldCertPem, field.TypeString)
	}
	if value, ok := dduo.mutation.KeyPem(); ok {
		_spec.SetField(databasedetector.FieldKeyPem, field.TypeString, value)
	}
	if dduo.mutation.KeyPemCleared() {
		_spec.ClearField(databasedetector.FieldKeyPem, field.TypeString)
	}
	_spec.AddModifiers(dduo.modifiers...)
	_node = &DatabaseDetector{config: dduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{databasedetector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
