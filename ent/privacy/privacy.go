// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/vicanso/cybertect/ent"

	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The ConfigurationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConfigurationQueryRuleFunc func(context.Context, *ent.ConfigurationQuery) error

// EvalQuery return f(ctx, q).
func (f ConfigurationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConfigurationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConfigurationQuery", q)
}

// The ConfigurationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConfigurationMutationRuleFunc func(context.Context, *ent.ConfigurationMutation) error

// EvalMutation calls f(ctx, m).
func (f ConfigurationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConfigurationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConfigurationMutation", m)
}

// The DNSDetectorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DNSDetectorQueryRuleFunc func(context.Context, *ent.DNSDetectorQuery) error

// EvalQuery return f(ctx, q).
func (f DNSDetectorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DNSDetectorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DNSDetectorQuery", q)
}

// The DNSDetectorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DNSDetectorMutationRuleFunc func(context.Context, *ent.DNSDetectorMutation) error

// EvalMutation calls f(ctx, m).
func (f DNSDetectorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DNSDetectorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DNSDetectorMutation", m)
}

// The DNSDetectorResultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DNSDetectorResultQueryRuleFunc func(context.Context, *ent.DNSDetectorResultQuery) error

// EvalQuery return f(ctx, q).
func (f DNSDetectorResultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DNSDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DNSDetectorResultQuery", q)
}

// The DNSDetectorResultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DNSDetectorResultMutationRuleFunc func(context.Context, *ent.DNSDetectorResultMutation) error

// EvalMutation calls f(ctx, m).
func (f DNSDetectorResultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DNSDetectorResultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DNSDetectorResultMutation", m)
}

// The DatabaseDetectorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DatabaseDetectorQueryRuleFunc func(context.Context, *ent.DatabaseDetectorQuery) error

// EvalQuery return f(ctx, q).
func (f DatabaseDetectorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DatabaseDetectorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DatabaseDetectorQuery", q)
}

// The DatabaseDetectorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DatabaseDetectorMutationRuleFunc func(context.Context, *ent.DatabaseDetectorMutation) error

// EvalMutation calls f(ctx, m).
func (f DatabaseDetectorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DatabaseDetectorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DatabaseDetectorMutation", m)
}

// The DatabaseDetectorResultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DatabaseDetectorResultQueryRuleFunc func(context.Context, *ent.DatabaseDetectorResultQuery) error

// EvalQuery return f(ctx, q).
func (f DatabaseDetectorResultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DatabaseDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DatabaseDetectorResultQuery", q)
}

// The DatabaseDetectorResultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DatabaseDetectorResultMutationRuleFunc func(context.Context, *ent.DatabaseDetectorResultMutation) error

// EvalMutation calls f(ctx, m).
func (f DatabaseDetectorResultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DatabaseDetectorResultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DatabaseDetectorResultMutation", m)
}

// The HTTPDetectorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HTTPDetectorQueryRuleFunc func(context.Context, *ent.HTTPDetectorQuery) error

// EvalQuery return f(ctx, q).
func (f HTTPDetectorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HTTPDetectorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HTTPDetectorQuery", q)
}

// The HTTPDetectorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HTTPDetectorMutationRuleFunc func(context.Context, *ent.HTTPDetectorMutation) error

// EvalMutation calls f(ctx, m).
func (f HTTPDetectorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HTTPDetectorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HTTPDetectorMutation", m)
}

// The HTTPDetectorResultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HTTPDetectorResultQueryRuleFunc func(context.Context, *ent.HTTPDetectorResultQuery) error

// EvalQuery return f(ctx, q).
func (f HTTPDetectorResultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HTTPDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HTTPDetectorResultQuery", q)
}

// The HTTPDetectorResultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HTTPDetectorResultMutationRuleFunc func(context.Context, *ent.HTTPDetectorResultMutation) error

// EvalMutation calls f(ctx, m).
func (f HTTPDetectorResultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HTTPDetectorResultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HTTPDetectorResultMutation", m)
}

// The PingDetectorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PingDetectorQueryRuleFunc func(context.Context, *ent.PingDetectorQuery) error

// EvalQuery return f(ctx, q).
func (f PingDetectorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PingDetectorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PingDetectorQuery", q)
}

// The PingDetectorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PingDetectorMutationRuleFunc func(context.Context, *ent.PingDetectorMutation) error

// EvalMutation calls f(ctx, m).
func (f PingDetectorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PingDetectorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PingDetectorMutation", m)
}

// The PingDetectorResultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PingDetectorResultQueryRuleFunc func(context.Context, *ent.PingDetectorResultQuery) error

// EvalQuery return f(ctx, q).
func (f PingDetectorResultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PingDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PingDetectorResultQuery", q)
}

// The PingDetectorResultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PingDetectorResultMutationRuleFunc func(context.Context, *ent.PingDetectorResultMutation) error

// EvalMutation calls f(ctx, m).
func (f PingDetectorResultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PingDetectorResultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PingDetectorResultMutation", m)
}

// The TCPDetectorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TCPDetectorQueryRuleFunc func(context.Context, *ent.TCPDetectorQuery) error

// EvalQuery return f(ctx, q).
func (f TCPDetectorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TCPDetectorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TCPDetectorQuery", q)
}

// The TCPDetectorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TCPDetectorMutationRuleFunc func(context.Context, *ent.TCPDetectorMutation) error

// EvalMutation calls f(ctx, m).
func (f TCPDetectorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TCPDetectorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TCPDetectorMutation", m)
}

// The TCPDetectorResultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TCPDetectorResultQueryRuleFunc func(context.Context, *ent.TCPDetectorResultQuery) error

// EvalQuery return f(ctx, q).
func (f TCPDetectorResultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TCPDetectorResultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TCPDetectorResultQuery", q)
}

// The TCPDetectorResultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TCPDetectorResultMutationRuleFunc func(context.Context, *ent.TCPDetectorResultMutation) error

// EvalMutation calls f(ctx, m).
func (f TCPDetectorResultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TCPDetectorResultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TCPDetectorResultMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserLoginQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserLoginQueryRuleFunc func(context.Context, *ent.UserLoginQuery) error

// EvalQuery return f(ctx, q).
func (f UserLoginQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserLoginQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserLoginQuery", q)
}

// The UserLoginMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserLoginMutationRuleFunc func(context.Context, *ent.UserLoginMutation) error

// EvalMutation calls f(ctx, m).
func (f UserLoginMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserLoginMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserLoginMutation", m)
}
