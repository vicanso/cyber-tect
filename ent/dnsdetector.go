// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/dnsdetector"
	"github.com/vicanso/cybertect/schema"
)

// DNSDetector is the model entity for the DNSDetector schema.
type DNSDetector struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间，添加记录时由程序自动生成
	CreatedAt time.Time `json:"createdAt" sql:"created_at"`
	// 更新时间，更新记录时由程序自动生成
	UpdatedAt time.Time `json:"updatedAt" sql:"updated_at"`
	// 状态，默认为启用状态
	Status schema.Status `json:"status,omitempty"`
	// 配置名称
	Name string `json:"name,omitempty"`
	// 配置拥有者
	Owners []string `json:"owners,omitempty"`
	// 接收者列表
	Receivers []string `json:"receivers,omitempty"`
	// 超时设置
	Timeout string `json:"timeout,omitempty"`
	// 检测间隔
	Interval string `json:"interval,omitempty"`
	// 配置描述
	Description string `json:"description,omitempty"`
	// 域名地址
	Host string `json:"host,omitempty"`
	// 域名配置的IP列表
	Ips []string `json:"ips,omitempty"`
	// DNS服务器列表
	Servers      []string `json:"servers,omitempty"`
	selectValues sql.SelectValues

	// 状态描述
	StatusDesc string `json:"statusDesc,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSDetector) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dnsdetector.FieldOwners, dnsdetector.FieldReceivers, dnsdetector.FieldIps, dnsdetector.FieldServers:
			values[i] = new([]byte)
		case dnsdetector.FieldID, dnsdetector.FieldStatus:
			values[i] = new(sql.NullInt64)
		case dnsdetector.FieldName, dnsdetector.FieldTimeout, dnsdetector.FieldInterval, dnsdetector.FieldDescription, dnsdetector.FieldHost:
			values[i] = new(sql.NullString)
		case dnsdetector.FieldCreatedAt, dnsdetector.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSDetector fields.
func (dd *DNSDetector) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dnsdetector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dd.ID = int(value.Int64)
		case dnsdetector.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dd.CreatedAt = value.Time
			}
		case dnsdetector.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dd.UpdatedAt = value.Time
			}
		case dnsdetector.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dd.Status = schema.Status(value.Int64)
			}
		case dnsdetector.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dd.Name = value.String
			}
		case dnsdetector.FieldOwners:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owners", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dd.Owners); err != nil {
					return fmt.Errorf("unmarshal field owners: %w", err)
				}
			}
		case dnsdetector.FieldReceivers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field receivers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dd.Receivers); err != nil {
					return fmt.Errorf("unmarshal field receivers: %w", err)
				}
			}
		case dnsdetector.FieldTimeout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				dd.Timeout = value.String
			}
		case dnsdetector.FieldInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				dd.Interval = value.String
			}
		case dnsdetector.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dd.Description = value.String
			}
		case dnsdetector.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				dd.Host = value.String
			}
		case dnsdetector.FieldIps:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ips", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dd.Ips); err != nil {
					return fmt.Errorf("unmarshal field ips: %w", err)
				}
			}
		case dnsdetector.FieldServers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field servers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dd.Servers); err != nil {
					return fmt.Errorf("unmarshal field servers: %w", err)
				}
			}
		default:
			dd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DNSDetector.
// This includes values selected through modifiers, order, etc.
func (dd *DNSDetector) Value(name string) (ent.Value, error) {
	return dd.selectValues.Get(name)
}

// Update returns a builder for updating this DNSDetector.
// Note that you need to call DNSDetector.Unwrap() before calling this method if this DNSDetector
// was returned from a transaction, and the transaction was committed or rolled back.
func (dd *DNSDetector) Update() *DNSDetectorUpdateOne {
	return NewDNSDetectorClient(dd.config).UpdateOne(dd)
}

// Unwrap unwraps the DNSDetector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dd *DNSDetector) Unwrap() *DNSDetector {
	_tx, ok := dd.config.driver.(*txDriver)
	if !ok {
		panic("ent: DNSDetector is not a transactional entity")
	}
	dd.config.driver = _tx.drv
	return dd
}

// String implements the fmt.Stringer.
func (dd *DNSDetector) String() string {
	var builder strings.Builder
	builder.WriteString("DNSDetector(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", dd.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dd.Name)
	builder.WriteString(", ")
	builder.WriteString("owners=")
	builder.WriteString(fmt.Sprintf("%v", dd.Owners))
	builder.WriteString(", ")
	builder.WriteString("receivers=")
	builder.WriteString(fmt.Sprintf("%v", dd.Receivers))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(dd.Timeout)
	builder.WriteString(", ")
	builder.WriteString("interval=")
	builder.WriteString(dd.Interval)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dd.Description)
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(dd.Host)
	builder.WriteString(", ")
	builder.WriteString("ips=")
	builder.WriteString(fmt.Sprintf("%v", dd.Ips))
	builder.WriteString(", ")
	builder.WriteString("servers=")
	builder.WriteString(fmt.Sprintf("%v", dd.Servers))
	builder.WriteByte(')')
	return builder.String()
}

// DNSDetectors is a parsable slice of DNSDetector.
type DNSDetectors []*DNSDetector
