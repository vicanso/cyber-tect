// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/dnsdetector"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/schema"
)

// DNSDetectorUpdate is the builder for updating DNSDetector entities.
type DNSDetectorUpdate struct {
	config
	hooks     []Hook
	mutation  *DNSDetectorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DNSDetectorUpdate builder.
func (ddu *DNSDetectorUpdate) Where(ps ...predicate.DNSDetector) *DNSDetectorUpdate {
	ddu.mutation.Where(ps...)
	return ddu
}

// SetStatus sets the "status" field.
func (ddu *DNSDetectorUpdate) SetStatus(s schema.Status) *DNSDetectorUpdate {
	ddu.mutation.ResetStatus()
	ddu.mutation.SetStatus(s)
	return ddu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ddu *DNSDetectorUpdate) SetNillableStatus(s *schema.Status) *DNSDetectorUpdate {
	if s != nil {
		ddu.SetStatus(*s)
	}
	return ddu
}

// AddStatus adds s to the "status" field.
func (ddu *DNSDetectorUpdate) AddStatus(s schema.Status) *DNSDetectorUpdate {
	ddu.mutation.AddStatus(s)
	return ddu
}

// SetName sets the "name" field.
func (ddu *DNSDetectorUpdate) SetName(s string) *DNSDetectorUpdate {
	ddu.mutation.SetName(s)
	return ddu
}

// SetOwners sets the "owners" field.
func (ddu *DNSDetectorUpdate) SetOwners(s []string) *DNSDetectorUpdate {
	ddu.mutation.SetOwners(s)
	return ddu
}

// AppendOwners appends s to the "owners" field.
func (ddu *DNSDetectorUpdate) AppendOwners(s []string) *DNSDetectorUpdate {
	ddu.mutation.AppendOwners(s)
	return ddu
}

// SetReceivers sets the "receivers" field.
func (ddu *DNSDetectorUpdate) SetReceivers(s []string) *DNSDetectorUpdate {
	ddu.mutation.SetReceivers(s)
	return ddu
}

// AppendReceivers appends s to the "receivers" field.
func (ddu *DNSDetectorUpdate) AppendReceivers(s []string) *DNSDetectorUpdate {
	ddu.mutation.AppendReceivers(s)
	return ddu
}

// SetTimeout sets the "timeout" field.
func (ddu *DNSDetectorUpdate) SetTimeout(s string) *DNSDetectorUpdate {
	ddu.mutation.SetTimeout(s)
	return ddu
}

// SetInterval sets the "interval" field.
func (ddu *DNSDetectorUpdate) SetInterval(s string) *DNSDetectorUpdate {
	ddu.mutation.SetInterval(s)
	return ddu
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (ddu *DNSDetectorUpdate) SetNillableInterval(s *string) *DNSDetectorUpdate {
	if s != nil {
		ddu.SetInterval(*s)
	}
	return ddu
}

// ClearInterval clears the value of the "interval" field.
func (ddu *DNSDetectorUpdate) ClearInterval() *DNSDetectorUpdate {
	ddu.mutation.ClearInterval()
	return ddu
}

// SetDescription sets the "description" field.
func (ddu *DNSDetectorUpdate) SetDescription(s string) *DNSDetectorUpdate {
	ddu.mutation.SetDescription(s)
	return ddu
}

// SetHost sets the "host" field.
func (ddu *DNSDetectorUpdate) SetHost(s string) *DNSDetectorUpdate {
	ddu.mutation.SetHost(s)
	return ddu
}

// SetIps sets the "ips" field.
func (ddu *DNSDetectorUpdate) SetIps(s []string) *DNSDetectorUpdate {
	ddu.mutation.SetIps(s)
	return ddu
}

// AppendIps appends s to the "ips" field.
func (ddu *DNSDetectorUpdate) AppendIps(s []string) *DNSDetectorUpdate {
	ddu.mutation.AppendIps(s)
	return ddu
}

// SetServers sets the "servers" field.
func (ddu *DNSDetectorUpdate) SetServers(s []string) *DNSDetectorUpdate {
	ddu.mutation.SetServers(s)
	return ddu
}

// AppendServers appends s to the "servers" field.
func (ddu *DNSDetectorUpdate) AppendServers(s []string) *DNSDetectorUpdate {
	ddu.mutation.AppendServers(s)
	return ddu
}

// Mutation returns the DNSDetectorMutation object of the builder.
func (ddu *DNSDetectorUpdate) Mutation() *DNSDetectorMutation {
	return ddu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ddu *DNSDetectorUpdate) Save(ctx context.Context) (int, error) {
	ddu.defaults()
	return withHooks(ctx, ddu.sqlSave, ddu.mutation, ddu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ddu *DNSDetectorUpdate) SaveX(ctx context.Context) int {
	affected, err := ddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ddu *DNSDetectorUpdate) Exec(ctx context.Context) error {
	_, err := ddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddu *DNSDetectorUpdate) ExecX(ctx context.Context) {
	if err := ddu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ddu *DNSDetectorUpdate) defaults() {
	if _, ok := ddu.mutation.UpdatedAt(); !ok {
		v := dnsdetector.UpdateDefaultUpdatedAt()
		ddu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ddu *DNSDetectorUpdate) check() error {
	if v, ok := ddu.mutation.Status(); ok {
		if err := dnsdetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.status": %w`, err)}
		}
	}
	if v, ok := ddu.mutation.Name(); ok {
		if err := dnsdetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.name": %w`, err)}
		}
	}
	if v, ok := ddu.mutation.Timeout(); ok {
		if err := dnsdetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.timeout": %w`, err)}
		}
	}
	if v, ok := ddu.mutation.Host(); ok {
		if err := dnsdetector.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.host": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ddu *DNSDetectorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSDetectorUpdate {
	ddu.modifiers = append(ddu.modifiers, modifiers...)
	return ddu
}

func (ddu *DNSDetectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ddu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsdetector.Table, dnsdetector.Columns, sqlgraph.NewFieldSpec(dnsdetector.FieldID, field.TypeInt))
	if ps := ddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ddu.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsdetector.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ddu.mutation.Status(); ok {
		_spec.SetField(dnsdetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ddu.mutation.AddedStatus(); ok {
		_spec.AddField(dnsdetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ddu.mutation.Name(); ok {
		_spec.SetField(dnsdetector.FieldName, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Owners(); ok {
		_spec.SetField(dnsdetector.FieldOwners, field.TypeJSON, value)
	}
	if value, ok := ddu.mutation.AppendedOwners(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldOwners, value)
		})
	}
	if value, ok := ddu.mutation.Receivers(); ok {
		_spec.SetField(dnsdetector.FieldReceivers, field.TypeJSON, value)
	}
	if value, ok := ddu.mutation.AppendedReceivers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldReceivers, value)
		})
	}
	if value, ok := ddu.mutation.Timeout(); ok {
		_spec.SetField(dnsdetector.FieldTimeout, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Interval(); ok {
		_spec.SetField(dnsdetector.FieldInterval, field.TypeString, value)
	}
	if ddu.mutation.IntervalCleared() {
		_spec.ClearField(dnsdetector.FieldInterval, field.TypeString)
	}
	if value, ok := ddu.mutation.Description(); ok {
		_spec.SetField(dnsdetector.FieldDescription, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Host(); ok {
		_spec.SetField(dnsdetector.FieldHost, field.TypeString, value)
	}
	if value, ok := ddu.mutation.Ips(); ok {
		_spec.SetField(dnsdetector.FieldIps, field.TypeJSON, value)
	}
	if value, ok := ddu.mutation.AppendedIps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldIps, value)
		})
	}
	if value, ok := ddu.mutation.Servers(); ok {
		_spec.SetField(dnsdetector.FieldServers, field.TypeJSON, value)
	}
	if value, ok := ddu.mutation.AppendedServers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldServers, value)
		})
	}
	_spec.AddModifiers(ddu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsdetector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ddu.mutation.done = true
	return n, nil
}

// DNSDetectorUpdateOne is the builder for updating a single DNSDetector entity.
type DNSDetectorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DNSDetectorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetStatus sets the "status" field.
func (dduo *DNSDetectorUpdateOne) SetStatus(s schema.Status) *DNSDetectorUpdateOne {
	dduo.mutation.ResetStatus()
	dduo.mutation.SetStatus(s)
	return dduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dduo *DNSDetectorUpdateOne) SetNillableStatus(s *schema.Status) *DNSDetectorUpdateOne {
	if s != nil {
		dduo.SetStatus(*s)
	}
	return dduo
}

// AddStatus adds s to the "status" field.
func (dduo *DNSDetectorUpdateOne) AddStatus(s schema.Status) *DNSDetectorUpdateOne {
	dduo.mutation.AddStatus(s)
	return dduo
}

// SetName sets the "name" field.
func (dduo *DNSDetectorUpdateOne) SetName(s string) *DNSDetectorUpdateOne {
	dduo.mutation.SetName(s)
	return dduo
}

// SetOwners sets the "owners" field.
func (dduo *DNSDetectorUpdateOne) SetOwners(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.SetOwners(s)
	return dduo
}

// AppendOwners appends s to the "owners" field.
func (dduo *DNSDetectorUpdateOne) AppendOwners(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.AppendOwners(s)
	return dduo
}

// SetReceivers sets the "receivers" field.
func (dduo *DNSDetectorUpdateOne) SetReceivers(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.SetReceivers(s)
	return dduo
}

// AppendReceivers appends s to the "receivers" field.
func (dduo *DNSDetectorUpdateOne) AppendReceivers(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.AppendReceivers(s)
	return dduo
}

// SetTimeout sets the "timeout" field.
func (dduo *DNSDetectorUpdateOne) SetTimeout(s string) *DNSDetectorUpdateOne {
	dduo.mutation.SetTimeout(s)
	return dduo
}

// SetInterval sets the "interval" field.
func (dduo *DNSDetectorUpdateOne) SetInterval(s string) *DNSDetectorUpdateOne {
	dduo.mutation.SetInterval(s)
	return dduo
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (dduo *DNSDetectorUpdateOne) SetNillableInterval(s *string) *DNSDetectorUpdateOne {
	if s != nil {
		dduo.SetInterval(*s)
	}
	return dduo
}

// ClearInterval clears the value of the "interval" field.
func (dduo *DNSDetectorUpdateOne) ClearInterval() *DNSDetectorUpdateOne {
	dduo.mutation.ClearInterval()
	return dduo
}

// SetDescription sets the "description" field.
func (dduo *DNSDetectorUpdateOne) SetDescription(s string) *DNSDetectorUpdateOne {
	dduo.mutation.SetDescription(s)
	return dduo
}

// SetHost sets the "host" field.
func (dduo *DNSDetectorUpdateOne) SetHost(s string) *DNSDetectorUpdateOne {
	dduo.mutation.SetHost(s)
	return dduo
}

// SetIps sets the "ips" field.
func (dduo *DNSDetectorUpdateOne) SetIps(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.SetIps(s)
	return dduo
}

// AppendIps appends s to the "ips" field.
func (dduo *DNSDetectorUpdateOne) AppendIps(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.AppendIps(s)
	return dduo
}

// SetServers sets the "servers" field.
func (dduo *DNSDetectorUpdateOne) SetServers(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.SetServers(s)
	return dduo
}

// AppendServers appends s to the "servers" field.
func (dduo *DNSDetectorUpdateOne) AppendServers(s []string) *DNSDetectorUpdateOne {
	dduo.mutation.AppendServers(s)
	return dduo
}

// Mutation returns the DNSDetectorMutation object of the builder.
func (dduo *DNSDetectorUpdateOne) Mutation() *DNSDetectorMutation {
	return dduo.mutation
}

// Where appends a list predicates to the DNSDetectorUpdate builder.
func (dduo *DNSDetectorUpdateOne) Where(ps ...predicate.DNSDetector) *DNSDetectorUpdateOne {
	dduo.mutation.Where(ps...)
	return dduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dduo *DNSDetectorUpdateOne) Select(field string, fields ...string) *DNSDetectorUpdateOne {
	dduo.fields = append([]string{field}, fields...)
	return dduo
}

// Save executes the query and returns the updated DNSDetector entity.
func (dduo *DNSDetectorUpdateOne) Save(ctx context.Context) (*DNSDetector, error) {
	dduo.defaults()
	return withHooks(ctx, dduo.sqlSave, dduo.mutation, dduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dduo *DNSDetectorUpdateOne) SaveX(ctx context.Context) *DNSDetector {
	node, err := dduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dduo *DNSDetectorUpdateOne) Exec(ctx context.Context) error {
	_, err := dduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dduo *DNSDetectorUpdateOne) ExecX(ctx context.Context) {
	if err := dduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dduo *DNSDetectorUpdateOne) defaults() {
	if _, ok := dduo.mutation.UpdatedAt(); !ok {
		v := dnsdetector.UpdateDefaultUpdatedAt()
		dduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dduo *DNSDetectorUpdateOne) check() error {
	if v, ok := dduo.mutation.Status(); ok {
		if err := dnsdetector.StatusValidator(int8(v)); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.status": %w`, err)}
		}
	}
	if v, ok := dduo.mutation.Name(); ok {
		if err := dnsdetector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.name": %w`, err)}
		}
	}
	if v, ok := dduo.mutation.Timeout(); ok {
		if err := dnsdetector.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.timeout": %w`, err)}
		}
	}
	if v, ok := dduo.mutation.Host(); ok {
		if err := dnsdetector.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "DNSDetector.host": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dduo *DNSDetectorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DNSDetectorUpdateOne {
	dduo.modifiers = append(dduo.modifiers, modifiers...)
	return dduo
}

func (dduo *DNSDetectorUpdateOne) sqlSave(ctx context.Context) (_node *DNSDetector, err error) {
	if err := dduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dnsdetector.Table, dnsdetector.Columns, sqlgraph.NewFieldSpec(dnsdetector.FieldID, field.TypeInt))
	id, ok := dduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DNSDetector.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dnsdetector.FieldID)
		for _, f := range fields {
			if !dnsdetector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dnsdetector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dduo.mutation.UpdatedAt(); ok {
		_spec.SetField(dnsdetector.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dduo.mutation.Status(); ok {
		_spec.SetField(dnsdetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := dduo.mutation.AddedStatus(); ok {
		_spec.AddField(dnsdetector.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := dduo.mutation.Name(); ok {
		_spec.SetField(dnsdetector.FieldName, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Owners(); ok {
		_spec.SetField(dnsdetector.FieldOwners, field.TypeJSON, value)
	}
	if value, ok := dduo.mutation.AppendedOwners(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldOwners, value)
		})
	}
	if value, ok := dduo.mutation.Receivers(); ok {
		_spec.SetField(dnsdetector.FieldReceivers, field.TypeJSON, value)
	}
	if value, ok := dduo.mutation.AppendedReceivers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldReceivers, value)
		})
	}
	if value, ok := dduo.mutation.Timeout(); ok {
		_spec.SetField(dnsdetector.FieldTimeout, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Interval(); ok {
		_spec.SetField(dnsdetector.FieldInterval, field.TypeString, value)
	}
	if dduo.mutation.IntervalCleared() {
		_spec.ClearField(dnsdetector.FieldInterval, field.TypeString)
	}
	if value, ok := dduo.mutation.Description(); ok {
		_spec.SetField(dnsdetector.FieldDescription, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Host(); ok {
		_spec.SetField(dnsdetector.FieldHost, field.TypeString, value)
	}
	if value, ok := dduo.mutation.Ips(); ok {
		_spec.SetField(dnsdetector.FieldIps, field.TypeJSON, value)
	}
	if value, ok := dduo.mutation.AppendedIps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldIps, value)
		})
	}
	if value, ok := dduo.mutation.Servers(); ok {
		_spec.SetField(dnsdetector.FieldServers, field.TypeJSON, value)
	}
	if value, ok := dduo.mutation.AppendedServers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dnsdetector.FieldServers, value)
		})
	}
	_spec.AddModifiers(dduo.modifiers...)
	_node = &DNSDetector{config: dduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsdetector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dduo.mutation.done = true
	return _node, nil
}
