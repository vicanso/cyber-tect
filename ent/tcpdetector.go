// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/cybertect/ent/tcpdetector"
	"github.com/vicanso/cybertect/schema"
)

// TCPDetector is the model entity for the TCPDetector schema.
type TCPDetector struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间，添加记录时由程序自动生成
	CreatedAt time.Time `json:"createdAt" sql:"created_at"`
	// 更新时间，更新记录时由程序自动生成
	UpdatedAt time.Time `json:"updatedAt" sql:"updated_at"`
	// 状态，默认为启用状态
	Status schema.Status `json:"status,omitempty"`
	// 配置名称
	Name string `json:"name,omitempty"`
	// 配置拥有者
	Owners []string `json:"owners,omitempty"`
	// 接收者列表
	Receivers []string `json:"receivers,omitempty"`
	// 超时设置
	Timeout string `json:"timeout,omitempty"`
	// 检测间隔
	Interval string `json:"interval,omitempty"`
	// 配置描述
	Description string `json:"description,omitempty"`
	// 检测地址列表
	Addrs        []string `json:"addrs,omitempty"`
	selectValues sql.SelectValues

	// 状态描述
	StatusDesc string `json:"statusDesc,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TCPDetector) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tcpdetector.FieldOwners, tcpdetector.FieldReceivers, tcpdetector.FieldAddrs:
			values[i] = new([]byte)
		case tcpdetector.FieldID, tcpdetector.FieldStatus:
			values[i] = new(sql.NullInt64)
		case tcpdetector.FieldName, tcpdetector.FieldTimeout, tcpdetector.FieldInterval, tcpdetector.FieldDescription:
			values[i] = new(sql.NullString)
		case tcpdetector.FieldCreatedAt, tcpdetector.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TCPDetector fields.
func (td *TCPDetector) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tcpdetector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case tcpdetector.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		case tcpdetector.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				td.UpdatedAt = value.Time
			}
		case tcpdetector.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				td.Status = schema.Status(value.Int64)
			}
		case tcpdetector.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				td.Name = value.String
			}
		case tcpdetector.FieldOwners:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owners", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Owners); err != nil {
					return fmt.Errorf("unmarshal field owners: %w", err)
				}
			}
		case tcpdetector.FieldReceivers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field receivers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Receivers); err != nil {
					return fmt.Errorf("unmarshal field receivers: %w", err)
				}
			}
		case tcpdetector.FieldTimeout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				td.Timeout = value.String
			}
		case tcpdetector.FieldInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				td.Interval = value.String
			}
		case tcpdetector.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				td.Description = value.String
			}
		case tcpdetector.FieldAddrs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field addrs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Addrs); err != nil {
					return fmt.Errorf("unmarshal field addrs: %w", err)
				}
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TCPDetector.
// This includes values selected through modifiers, order, etc.
func (td *TCPDetector) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// Update returns a builder for updating this TCPDetector.
// Note that you need to call TCPDetector.Unwrap() before calling this method if this TCPDetector
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TCPDetector) Update() *TCPDetectorUpdateOne {
	return NewTCPDetectorClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TCPDetector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TCPDetector) Unwrap() *TCPDetector {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TCPDetector is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TCPDetector) String() string {
	var builder strings.Builder
	builder.WriteString("TCPDetector(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("created_at=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(td.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", td.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(td.Name)
	builder.WriteString(", ")
	builder.WriteString("owners=")
	builder.WriteString(fmt.Sprintf("%v", td.Owners))
	builder.WriteString(", ")
	builder.WriteString("receivers=")
	builder.WriteString(fmt.Sprintf("%v", td.Receivers))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(td.Timeout)
	builder.WriteString(", ")
	builder.WriteString("interval=")
	builder.WriteString(td.Interval)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(td.Description)
	builder.WriteString(", ")
	builder.WriteString("addrs=")
	builder.WriteString(fmt.Sprintf("%v", td.Addrs))
	builder.WriteByte(')')
	return builder.String()
}

// TCPDetectors is a parsable slice of TCPDetector.
type TCPDetectors []*TCPDetector
