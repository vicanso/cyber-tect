// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/cybertect/ent/predicate"
	"github.com/vicanso/cybertect/ent/schema"
	"github.com/vicanso/cybertect/ent/tcpdetectorresult"
)

// TCPDetectorResultUpdate is the builder for updating TCPDetectorResult entities.
type TCPDetectorResultUpdate struct {
	config
	hooks    []Hook
	mutation *TCPDetectorResultMutation
}

// Where adds a new predicate for the TCPDetectorResultUpdate builder.
func (tdru *TCPDetectorResultUpdate) Where(ps ...predicate.TCPDetectorResult) *TCPDetectorResultUpdate {
	tdru.mutation.predicates = append(tdru.mutation.predicates, ps...)
	return tdru
}

// SetTask sets the "task" field.
func (tdru *TCPDetectorResultUpdate) SetTask(i int) *TCPDetectorResultUpdate {
	tdru.mutation.ResetTask()
	tdru.mutation.SetTask(i)
	return tdru
}

// AddTask adds i to the "task" field.
func (tdru *TCPDetectorResultUpdate) AddTask(i int) *TCPDetectorResultUpdate {
	tdru.mutation.AddTask(i)
	return tdru
}

// SetResult sets the "result" field.
func (tdru *TCPDetectorResultUpdate) SetResult(i int8) *TCPDetectorResultUpdate {
	tdru.mutation.ResetResult()
	tdru.mutation.SetResult(i)
	return tdru
}

// AddResult adds i to the "result" field.
func (tdru *TCPDetectorResultUpdate) AddResult(i int8) *TCPDetectorResultUpdate {
	tdru.mutation.AddResult(i)
	return tdru
}

// SetMaxDuration sets the "maxDuration" field.
func (tdru *TCPDetectorResultUpdate) SetMaxDuration(i int) *TCPDetectorResultUpdate {
	tdru.mutation.ResetMaxDuration()
	tdru.mutation.SetMaxDuration(i)
	return tdru
}

// AddMaxDuration adds i to the "maxDuration" field.
func (tdru *TCPDetectorResultUpdate) AddMaxDuration(i int) *TCPDetectorResultUpdate {
	tdru.mutation.AddMaxDuration(i)
	return tdru
}

// SetMessages sets the "messages" field.
func (tdru *TCPDetectorResultUpdate) SetMessages(s []string) *TCPDetectorResultUpdate {
	tdru.mutation.SetMessages(s)
	return tdru
}

// SetAddrs sets the "addrs" field.
func (tdru *TCPDetectorResultUpdate) SetAddrs(s string) *TCPDetectorResultUpdate {
	tdru.mutation.SetAddrs(s)
	return tdru
}

// SetResults sets the "results" field.
func (tdru *TCPDetectorResultUpdate) SetResults(sdsr schema.TCPDetectorSubResults) *TCPDetectorResultUpdate {
	tdru.mutation.SetResults(sdsr)
	return tdru
}

// Mutation returns the TCPDetectorResultMutation object of the builder.
func (tdru *TCPDetectorResultUpdate) Mutation() *TCPDetectorResultMutation {
	return tdru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdru *TCPDetectorResultUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tdru.defaults()
	if len(tdru.hooks) == 0 {
		if err = tdru.check(); err != nil {
			return 0, err
		}
		affected, err = tdru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TCPDetectorResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdru.check(); err != nil {
				return 0, err
			}
			tdru.mutation = mutation
			affected, err = tdru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tdru.hooks) - 1; i >= 0; i-- {
			mut = tdru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tdru *TCPDetectorResultUpdate) SaveX(ctx context.Context) int {
	affected, err := tdru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdru *TCPDetectorResultUpdate) Exec(ctx context.Context) error {
	_, err := tdru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdru *TCPDetectorResultUpdate) ExecX(ctx context.Context) {
	if err := tdru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdru *TCPDetectorResultUpdate) defaults() {
	if _, ok := tdru.mutation.UpdatedAt(); !ok {
		v := tcpdetectorresult.UpdateDefaultUpdatedAt()
		tdru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdru *TCPDetectorResultUpdate) check() error {
	if v, ok := tdru.mutation.Result(); ok {
		if err := tcpdetectorresult.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf("ent: validator failed for field \"result\": %w", err)}
		}
	}
	return nil
}

func (tdru *TCPDetectorResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tcpdetectorresult.Table,
			Columns: tcpdetectorresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tcpdetectorresult.FieldID,
			},
		},
	}
	if ps := tdru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tcpdetectorresult.FieldUpdatedAt,
		})
	}
	if value, ok := tdru.mutation.Task(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldTask,
		})
	}
	if value, ok := tdru.mutation.AddedTask(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldTask,
		})
	}
	if value, ok := tdru.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tcpdetectorresult.FieldResult,
		})
	}
	if value, ok := tdru.mutation.AddedResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tcpdetectorresult.FieldResult,
		})
	}
	if value, ok := tdru.mutation.MaxDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldMaxDuration,
		})
	}
	if value, ok := tdru.mutation.AddedMaxDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldMaxDuration,
		})
	}
	if value, ok := tdru.mutation.Messages(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tcpdetectorresult.FieldMessages,
		})
	}
	if value, ok := tdru.mutation.Addrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tcpdetectorresult.FieldAddrs,
		})
	}
	if value, ok := tdru.mutation.Results(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tcpdetectorresult.FieldResults,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tcpdetectorresult.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TCPDetectorResultUpdateOne is the builder for updating a single TCPDetectorResult entity.
type TCPDetectorResultUpdateOne struct {
	config
	hooks    []Hook
	mutation *TCPDetectorResultMutation
}

// SetTask sets the "task" field.
func (tdruo *TCPDetectorResultUpdateOne) SetTask(i int) *TCPDetectorResultUpdateOne {
	tdruo.mutation.ResetTask()
	tdruo.mutation.SetTask(i)
	return tdruo
}

// AddTask adds i to the "task" field.
func (tdruo *TCPDetectorResultUpdateOne) AddTask(i int) *TCPDetectorResultUpdateOne {
	tdruo.mutation.AddTask(i)
	return tdruo
}

// SetResult sets the "result" field.
func (tdruo *TCPDetectorResultUpdateOne) SetResult(i int8) *TCPDetectorResultUpdateOne {
	tdruo.mutation.ResetResult()
	tdruo.mutation.SetResult(i)
	return tdruo
}

// AddResult adds i to the "result" field.
func (tdruo *TCPDetectorResultUpdateOne) AddResult(i int8) *TCPDetectorResultUpdateOne {
	tdruo.mutation.AddResult(i)
	return tdruo
}

// SetMaxDuration sets the "maxDuration" field.
func (tdruo *TCPDetectorResultUpdateOne) SetMaxDuration(i int) *TCPDetectorResultUpdateOne {
	tdruo.mutation.ResetMaxDuration()
	tdruo.mutation.SetMaxDuration(i)
	return tdruo
}

// AddMaxDuration adds i to the "maxDuration" field.
func (tdruo *TCPDetectorResultUpdateOne) AddMaxDuration(i int) *TCPDetectorResultUpdateOne {
	tdruo.mutation.AddMaxDuration(i)
	return tdruo
}

// SetMessages sets the "messages" field.
func (tdruo *TCPDetectorResultUpdateOne) SetMessages(s []string) *TCPDetectorResultUpdateOne {
	tdruo.mutation.SetMessages(s)
	return tdruo
}

// SetAddrs sets the "addrs" field.
func (tdruo *TCPDetectorResultUpdateOne) SetAddrs(s string) *TCPDetectorResultUpdateOne {
	tdruo.mutation.SetAddrs(s)
	return tdruo
}

// SetResults sets the "results" field.
func (tdruo *TCPDetectorResultUpdateOne) SetResults(sdsr schema.TCPDetectorSubResults) *TCPDetectorResultUpdateOne {
	tdruo.mutation.SetResults(sdsr)
	return tdruo
}

// Mutation returns the TCPDetectorResultMutation object of the builder.
func (tdruo *TCPDetectorResultUpdateOne) Mutation() *TCPDetectorResultMutation {
	return tdruo.mutation
}

// Save executes the query and returns the updated TCPDetectorResult entity.
func (tdruo *TCPDetectorResultUpdateOne) Save(ctx context.Context) (*TCPDetectorResult, error) {
	var (
		err  error
		node *TCPDetectorResult
	)
	tdruo.defaults()
	if len(tdruo.hooks) == 0 {
		if err = tdruo.check(); err != nil {
			return nil, err
		}
		node, err = tdruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TCPDetectorResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdruo.check(); err != nil {
				return nil, err
			}
			tdruo.mutation = mutation
			node, err = tdruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tdruo.hooks) - 1; i >= 0; i-- {
			mut = tdruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tdruo *TCPDetectorResultUpdateOne) SaveX(ctx context.Context) *TCPDetectorResult {
	node, err := tdruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tdruo *TCPDetectorResultUpdateOne) Exec(ctx context.Context) error {
	_, err := tdruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdruo *TCPDetectorResultUpdateOne) ExecX(ctx context.Context) {
	if err := tdruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdruo *TCPDetectorResultUpdateOne) defaults() {
	if _, ok := tdruo.mutation.UpdatedAt(); !ok {
		v := tcpdetectorresult.UpdateDefaultUpdatedAt()
		tdruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdruo *TCPDetectorResultUpdateOne) check() error {
	if v, ok := tdruo.mutation.Result(); ok {
		if err := tcpdetectorresult.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf("ent: validator failed for field \"result\": %w", err)}
		}
	}
	return nil
}

func (tdruo *TCPDetectorResultUpdateOne) sqlSave(ctx context.Context) (_node *TCPDetectorResult, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tcpdetectorresult.Table,
			Columns: tcpdetectorresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tcpdetectorresult.FieldID,
			},
		},
	}
	id, ok := tdruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TCPDetectorResult.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := tdruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tcpdetectorresult.FieldUpdatedAt,
		})
	}
	if value, ok := tdruo.mutation.Task(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldTask,
		})
	}
	if value, ok := tdruo.mutation.AddedTask(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldTask,
		})
	}
	if value, ok := tdruo.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tcpdetectorresult.FieldResult,
		})
	}
	if value, ok := tdruo.mutation.AddedResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tcpdetectorresult.FieldResult,
		})
	}
	if value, ok := tdruo.mutation.MaxDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldMaxDuration,
		})
	}
	if value, ok := tdruo.mutation.AddedMaxDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcpdetectorresult.FieldMaxDuration,
		})
	}
	if value, ok := tdruo.mutation.Messages(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tcpdetectorresult.FieldMessages,
		})
	}
	if value, ok := tdruo.mutation.Addrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tcpdetectorresult.FieldAddrs,
		})
	}
	if value, ok := tdruo.mutation.Results(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tcpdetectorresult.FieldResults,
		})
	}
	_node = &TCPDetectorResult{config: tdruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tdruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tcpdetectorresult.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
